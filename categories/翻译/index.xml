<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>翻译 on 书写|记下人生痕迹</title>
    <link>http://towriting.com/categories/%E7%BF%BB%E8%AF%91/</link>
    <description>Recent content in 翻译 on 书写|记下人生痕迹</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>bugliu 2023</copyright>
    <lastBuildDate>Thu, 17 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://towriting.com/categories/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bjarne Stroustrup previews C&#43;&#43; 17</title>
      <link>http://towriting.com/blog/2016/03/17/bjarne-stroustrup-previews-c-plus-plus-17/</link>
      <pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2016/03/17/bjarne-stroustrup-previews-c-plus-plus-17/</guid>
      <description>本文是infoWorld关于C++17对C++之父进行的采访，原文见这里 InfoWorld:C++17什么时候可用? Stroustrup:C</description>
    </item>
    
    <item>
      <title>实现无锁算法的常见陷阱</title>
      <link>http://towriting.com/blog/2014/08/18/common-pitfalls-in-writing-lock-free-algorithms/</link>
      <pubDate>Mon, 18 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2014/08/18/common-pitfalls-in-writing-lock-free-algorithms/</guid>
      <description>翻译自：Common Pitfalls in Writing Lock-Free Algorithms 通常，只要两个操作之间的步骤是有穷的，一个多线程算法就认为可以实现为无锁(lock-free)。理论上无锁算法</description>
    </item>
    
    <item>
      <title>你们是勤劳还是懒惰的程序员？</title>
      <link>http://towriting.com/blog/2013/12/15/are-your-programmers-working-hard-or-are-they-lazy/</link>
      <pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/12/15/are-your-programmers-working-hard-or-are-they-lazy/</guid>
      <description>当人们从事体力劳动时，很容易判断他们的努力程度。你可以看到肢体运动和汗水。并且可以看到他们的劳动成果：高楼拔地，稻谷归仓...。承认和褒奖辛</description>
    </item>
    
    <item>
      <title>整洁代码之上</title>
      <link>http://towriting.com/blog/2013/12/03/beyond-clean-code/</link>
      <pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/12/03/beyond-clean-code/</guid>
      <description>什么是整洁代码（What Is Clean Code） 当你拿这个问题问不同的人，或采用不同的语气，你可能会得到不同的答案。但通常无外乎这些评判标准： 自解释的</description>
    </item>
    
    <item>
      <title>神级程序员的神话</title>
      <link>http://towriting.com/blog/2013/09/30/the-myth-of-the-rockstar-programmer/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/09/30/the-myth-of-the-rockstar-programmer/</guid>
      <description>神级程序员1的神话不过就是个，神话！它是由一些可悲的原因形成的神话： 给普通人设置难以实现的预期 宣扬虚无的神级程序员打压团队 告诉某人是神级的并</description>
    </item>
    
    <item>
      <title>C&#43;&#43;手爱德华</title>
      <link>http://towriting.com/blog/2013/09/23/edward-chands/</link>
      <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/09/23/edward-chands/</guid>
      <description>我一直在寻找一种可以类比使用C++编程时心情的东西，直到我想起1900年Tim Burton的电影，剪刀手爱德华。 在这部电影中，可怜的家伙（J</description>
    </item>
    
    <item>
      <title>世界上最杰出的程序员是获得最大快乐的那个人</title>
      <link>http://towriting.com/blog/2013/09/22/the-best-programmer-in-the-world/</link>
      <pubDate>Sun, 22 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/09/22/the-best-programmer-in-the-world/</guid>
      <description>Colin停在我的办公室来叫我去看他最近的项目。他拆开了他的显示器切换器（用来在两台PC之间切换单个显示器），拆开的切换器就摊放在他的桌子上</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11系列-常量表达式</title>
      <link>http://towriting.com/blog/2013/09/17/constexpr/</link>
      <pubDate>Tue, 17 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/09/17/constexpr/</guid>
      <description>C++11有一些这样的改善，这种改善保证写出的代码比以往任何时候的执行效率都要好。这种改善之一就是生成常量表达式，允许程序利用编译时的计算能</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11系列-区间迭代</title>
      <link>http://towriting.com/blog/2013/08/20/ranged-for-loop/</link>
      <pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/08/20/ranged-for-loop/</guid>
      <description>在我前面介绍C++11的文章中，我提到C++11将会带来一些实用的改进。我的意思是它将移除一些不必要的打字和其它影响快速编码的壁垒。我前面讲</description>
    </item>
    
    <item>
      <title>程序员的困境</title>
      <link>http://towriting.com/blog/2013/08/16/programmer-dilemma/</link>
      <pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/08/16/programmer-dilemma/</guid>
      <description>译者：toWriting.com翻译自：Programmer’s dilemma 最近面试了数十个应聘内核开发职位的求职者。这些求职者都来自于芯片或嵌入式操</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11系列-lambda函数</title>
      <link>http://towriting.com/blog/2013/08/11/lambda-closures/</link>
      <pubDate>Sun, 11 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/08/11/lambda-closures/</guid>
      <description>C++11一个最激动人心的特性是支持创建lambda函数（有时称为闭包）。这意味着什么？一个Lambda函数是一个可以内联写在你代码中的函数</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11系列-改进的类型推导：auto、decltype和新的函数语法</title>
      <link>http://towriting.com/blog/2013/08/08/improved-type-inference-in-cpp11/</link>
      <pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/08/08/improved-type-inference-in-cpp11/</guid>
      <description>C++11引入了一些新的实用的类型推导能力，这意味着你可以花费更少的时间去写那些编译器已经知道的东西。当然有些时候你需要帮助编译器或者你的编</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11系列-什么是C&#43;&#43;11</title>
      <link>http://towriting.com/blog/2013/08/01/what-is-cpp11/</link>
      <pubDate>Thu, 01 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://towriting.com/blog/2013/08/01/what-is-cpp11/</guid>
      <description>什么是C++0x? C++0x是C++最新标准标准化过程中的曾用名，在这一系列文章中我们将介绍最新标准添加的一系列新的语言特性。在2011年9</description>
    </item>
    
  </channel>
</rss>
