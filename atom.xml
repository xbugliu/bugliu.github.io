<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2013-07-25T00:39:52+08:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Smart GetProcAddress之实现]]></title>
    <link href="http://towriting.com/blog/2013/07/20/smart-getprocaddress/"/>
    <updated>2013-07-20T22:36:00+08:00</updated>
    <id>http://towriting.com/blog/2013/07/20/smart-getprocaddress</id>
    <content type="html"><![CDATA[<p>Windows下有过编程经验的朋友肯定用过这个函数：<a href="http://msdn.microsoft.com/en-us/library/ms683212%28v=vs.85%29.aspx">GetProcAddress</a>，作用呢，就是从加载的动态库中获取指定函数名的函数入口地址，函数使用方法简单，一般是如下流程：</p>

<figure class='code'><figcaption><span>DLL导出函数的头文件:dll.h</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func1</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func2</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>动态加载DLL调用上面两个函数</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">*</span><span class="n">FUNC1</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">*</span><span class="n">FUNC2</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">FUNC1</span> <span class="n">func1</span> <span class="o">=</span> <span class="p">(</span><span class="n">FUNC1</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;func1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">FUNC2</span> <span class="n">func2</span> <span class="o">=</span> <span class="p">(</span><span class="n">FUNC2</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;func2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">func1</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">func2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上是主流的代码写法，但其实稍有问题：
1. 要定义一套函数类型，且违反DRY，枯燥乏味，影响代码美观
2. 隐式类型转换是魔鬼，如果DLL实现变化，则调用出错，比如：</p>

<figure class='code'><figcaption><span>DLL导出函数的头文件：fun2的参数变成了三个，调用非出错不可</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func1</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func2</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>好，问题来了，如何避免：</p>

<figure class='code'><figcaption><span>方案1：使用模板</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 封装一个智能GetProcAddress</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">SmartGetProcAddress</span><span class="p">(</span><span class="n">HModule</span> <span class="n">hModule</span><span class="p">,</span> <span class="n">TChar</span><span class="o">*</span> <span class="n">pFuncName</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hModule</span><span class="p">,</span> <span class="n">pFuncName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用方法如下：注意1. 要引用对应头文件，2. auto（自动类型推导）关键字从VS2010开始支持</span>
</span><span class='line'><span class="k">auto</span> <span class="n">func1</span> <span class="o">=</span> <span class="n">SmartGetProcAddress</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;func1&quot;</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">func1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起来我们解决了DRY问题，也不用写繁琐的typedef了，于是我们开始Build，很快你就发现Link错误，unresolved external symbol，没注意取地址&amp;func1，已静态依赖于DLL，看来此路不通。取地址的目的是从头文件中获取函数的类型，还有什么方法可以获取函数的类型呢？</p>

<figure class='code'><figcaption><span>方案2：使用decltype</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 封装一个智能GetProcAddress</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">SmartGetProcAddress</span><span class="p">(</span><span class="n">HModule</span> <span class="n">hModule</span><span class="p">,</span> <span class="n">TChar</span><span class="o">*</span> <span class="n">pFuncName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hModule</span><span class="p">,</span> <span class="n">pFuncName</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用方法如下：</span>
</span><span class='line'><span class="k">auto</span> <span class="n">func1</span> <span class="o">=</span> <span class="n">SmartGetProcAddress</span><span class="o">&lt;</span><span class="n">decltype</span><span class="p">(</span><span class="n">func1</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;func1&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用decltype可以解决，函数取地址（&amp;)会静态依赖DLL问题，不过不知VS2010支持不支持decltype(func1)这种写法，经测试G++4.7是支持的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我曾读过的那些书]]></title>
    <link href="http://towriting.com/blog/2013/07/20/the-books-i-have-read/"/>
    <updated>2013-07-20T08:13:00+08:00</updated>
    <id>http://towriting.com/blog/2013/07/20/the-books-i-have-read</id>
    <content type="html"><![CDATA[<p>在我心中读书是一件很帅的事情：束发读诗书，修德兼修身，仰观与俯查，韬略胸中存。在此记录下自己曾读过的书们。</p>

<blockquote><p>大学以前读的书：这个时期距今较久，房屋翻新书籍都已轶失，当时亦没有记录下来读书清单，所以只能模糊的回忆了：</p></blockquote>

<ol>
<li><p>书名：各种启蒙读物  作者：百家 阅读时间：启蒙时至小学毕业</p>

<p> 此时读过的非课本书主要是一些启蒙读物、幼儿读物、作文书。能说的上名字的只有有：《小学生必读》系列杂志、《舒克和贝塔》、《旁中华书法》，《格林童话》，《上下五千年》，《成语故事》。这个时期好像没有主动买过书，父母偶尔会买一些绘画、作文书，故事书也很少买。自己读书的主要来源是班上的同学带来的课外书，和哥哥的教材。哥哥比我大四岁，他那些语文书我总是看的津津有味，一遍又一遍。</p></li>
<li><p>白马笑西风</p></li>
<li>鹿鼎记</li>
<li>碧血剑</li>
<li>雪山飞狐</li>
<li>鸳鸯刀</li>
<li>物理演义</li>
<li>化学演义</li>
<li>东周列国志</li>
<li>情人剑</li>
<li>方与圆 高二</li>
<li>平凡的世界 高二</li>
<li>胡雪岩</li>
<li>红与黑</li>
<li>平凡的世界</li>
<li>红楼梦</li>
<li>战争与和平</li>
<li>学习的革命</li>
<li>鲁迅文集</li>
<li>余秋雨文集</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始写博客]]></title>
    <link href="http://towriting.com/blog/2013/07/17/begin-writing-blog/"/>
    <updated>2013-07-17T22:04:00+08:00</updated>
    <id>http://towriting.com/blog/2013/07/17/begin-writing-blog</id>
    <content type="html"><![CDATA[<h3>离职的意外收获</h3>

<p>今年离职有一个意外收获，合适的工作很难找，找工作的空白期间，买了个域名（towriting)，开了这个个人博客，自此可以在这里记录自己的成长，乃至老去。</p>

<h3>写博客的好处</h3>

<p>这个好处是显而易见，人所共知的，刘未鹏很早以前就提出了一个技术人员应该写博客，书写是为了更好的思考，可以使知识融汇贯通。除了这些，世俗的讲，博客可以是姜太公钓鱼的勾，好的博客可以大大增加简历的含金量，吸引各种Headhunting；恶俗的讲，博客更可以引入Google Ads等，成为一项收入来源。</p>

<h3>我为什么必须要写博客</h3>

<ul>
<li>自己生于农村，较之同侪启蒙早，当时农村文娱匮乏，酷喜读书，聊以消遣。16岁左右，正值高中，甚喜作文，高二以前，还能写有生命的作文，语言与文字能力倍受老师同学钦佩，自己竟曾立志成为中国最后一个释、儒、道集大成者。高三读《石头记》，且其它科目压力骤大，遂由《芙蓉女儿诔》推导出适应各种命题的万能作文模板，自此文章徒具形式。虽旧梦难圆，但做程序员久矣，口齿含糊，木讷呆滞，想借写博客，防止自己失语与老年痴呆。</li>
<li>从业三年来，读书不辍，遇问题好奇追根，所以技术进步较大。因识人不多，所以自视C++水平处周围大部分人之上。然半路出家，技术似空中楼阁，学习已经进入瓶颈期。技能进步的目标模糊，但写博客无疑是朝目标走的，瓶颈期只能先如此了，同时梳理一下三年来的收获。</li>
<li>记录下自己活着的证据。</li>
</ul>


<h3>给自己的要求</h3>

<ul>
<li>内容必需保证原创或翻译</li>
<li>能保证每周一篇文章</li>
<li>不能因为上一条的要求而使内容敷衍</li>
</ul>

]]></content>
  </entry>
  
</feed>
