<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2016-07-19T00:11:34+00:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Bjarne Stroustrup previews C++ 17]]></title>
    <link href="http://towriting.com/blog/2016/03/17/bjarne-stroustrup-previews-c-plus-plus-17/"/>
    
    <updated>2016-03-17T23:17:22+00:00</updated>
    <id>http://towriting.com/blog/2016/03/17/bjarne-stroustrup-previews-c-plus-plus-17</id>
    
    <content type="html"><![CDATA[<p>本文是infoWorld关于C++17对C++之父进行的采访，原文见<a href="0">这里</a></p>

<hr />

<p><strong>InfoWorld</strong>:C++17什么时候可用?</p>

<p><strong>Stroustrup</strong>:C++17将会在2017年的某个时间正式发布，可能是在秋季。主要特性的实现会准时或提前完成。其实有些部分现在已经实现了。</p>

<p><strong>InfoWorld</strong>:你认为C++17有哪些重大的新特性?</p>

<p><strong>Stroustrup</strong>:如何定义重大呢，假如一个语言特性或者库会影响你对这门语言的看法并且影响你的代码结构，那我认为它就是重要的。按照这个定义，很遗憾，我的答案是：
对于绝大多数人来说，C++17并没有重大的特性。请不要把&#8221;C++17并无重大改进”这样的文字加粗或者作为文章的标题，因为这是不准确的、是不必要的煽动。我很看好文件库(file system library)和
并行算法(parallel algorithms)。它们特别有用，会使有些任务变简单，但对于大部分人来说，这并不是重大的特性。</p>

<p>然而，我认为重大的特性以其它的方式存在。一些重大的特性会出现在TS(Technical Specifications)中。比如：concepts, networking, more concurrency stuff, ranges (Standard Template Library 2), modules, coroutines.
它们肯定不会被包含在C++17中，但它们确实存在着。</p>

<p><strong>InfoWorld</strong>:C++17的哪些<a href="http://meetingcpp.com/index.php/br/items/cpp17-and-other-future-highlights-of-cpp.html">改进</a>对开发者影响最大呢？</p>

<ul>
<li>(parts of) Library Fundamentals TS v1</li>
<li>Parallelism TS v1 * File System TS v1</li>
<li>Special math functions</li>
<li>hardware<em>*</em>interference_size * .is_always_lockfree() * clamp()</li>
<li>non-const .data() for string</li>
</ul>


<p><strong>Stroustrup</strong>:这因人而异，因你做的事情而异。对我来说，我认为并行算法是最重要的，文件系统库也是很方便的特性. <code>optional</code>, <code>any</code>和<code>string_view</code>这些基础库中的东西也很重要. 另外STL中其它小的改进也很多.
如果你是搞数学的，那么数学库对你是不可或缺的，现在也都在标准库中了。</p>

<p><strong>InfoWorld</strong>:7月份能知道C++17所有的特性(facets)吗?</p>

<p><strong>Stroustrup</strong>:我希望可以，2016年6月下旬，我们会在芬兰奥卢确定一些小的提议,比如:</p>

<ul>
<li>Dynamic memory allocation for overaligned data (for better vectorization)</li>
<li>Template parameter deduction for constructors (make many&#8221;make functions&#8221; redundant)</li>
<li>constexpr_if (a compile-time if)</li>
<li>Refining Expression Evaluation Order for Idiomatic C++ (finally, we can eliminate bugs from people accidentally relying on undefined order of evaluation)</li>
<li>Default comparisons (==, !=, &lt;, &lt;=, >, and >=)</li>
<li>Operator Dot (smart references)</li>
<li>Generalizing the Range-Based For Loop (for sentinel-based and counted ranges)</li>
<li>Structured bindings (simple use of multiple return types)</li>
</ul>


<p>只要不是运气太差，这些都可以确定下来的。当然，投票统计之前所有事情都是无法确定的。标准委员会会争取共识，一张否决票顶五张赞成票。和16年3月份通过的决议比较，假如本次通过了大部分决议那C++17将变得更加有趣。</p>

<p><strong>InfoWorld</strong>:随着<code>constexpr lambdas</code>进入C++17，C++是不是朝着函数式编程语言更进了一步。这对开发者有什么影响呢？</p>

<p><strong>Stroustrup</strong>:自从1994年STL起，C++平稳而谨慎的增加着函数式编程技术的使用。<code>constexpr lambdas</code>只是编译时特性的一个简单扩展。如果<code>structured bindings</code>的决议C++17通过了的话，
多返回值将被支持，就像一些函数式编程语言的函数一样。</p>

<p><strong>InfoWorld</strong>:<code>Concepts</code>这个可以改善编译时诊断的技术，没有被加入C++17是不是一件遗憾的事情？</p>

<p><strong>Stroustrup</strong>:对我来说是的，这是个巨大的遗憾。从2004年，我就和Gabriel Dos Reis及其他几个人一起，在这个问题上研究了好几年，并且用Andrew Sutton的实现测试了三年的时间。我觉得可以
正式发布这个特性了，但标准委员会的大多数人因为各种原因不同意。一个<code>Concept</code>是对类型和值的集合的编译时断言(predicate)。我认为“更好的错误提示&#8221;是<code>Concept</code>最基础且重要的一个优势：我们可以对
我们泛型函数（模板）的参数设定要求。这样可以促成更好的设计、更好的接口、更高效的代码。</p>

<p><strong>InfoWorld</strong>:你能不能回答下，为什么<code>modules</code>和<code>co-routines</code>也不会放到c++17.</p>

<p><strong>Stroustrup</strong>:我很乐意看到<code>modules</code>可以更好的防范某些单元上下文中的改变(比如宏)和更好的编译速度，但是提议还没有为C++17准备好，所以只能加进TS了。我想最终<code>modules</code>会变成一个重要的特性。
它解决了C/C++里面长期存在的问题。MS C++(vs2015)和clang的某些版本已经有类似<code>modules</code>的支持。对于<code>co-routines</code>没有直接放到c++17而是放到TS中我很失望。我认为它在一些特殊的场景下很重要(pipelines and generators)。
MS Vc++（vs2015）也集成了这个特性。</p>

<p><strong>InfoWorld</strong>:为什么你不延期发布一年，以使<code>concepts</code>、<code>modules</code>和<code>co-routines</code>等特性可以一起发布呢?</p>

<p><strong>Stroustrup</strong>:我以前也被问过这个问题，我回答了no, 我们要保证c++17可以按期发布。一次延期会是一次很不好的先例，会导致后面更多的延期。假如c++17变成c++18, 我想c++20会变成c++22或者c++23。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Android 6.0 openssl crash]]></title>
    <link href="http://towriting.com/blog/2015/10/11/android-6-dot-0-openssl-crash/"/>
    
    <updated>2015-10-11T22:59:55+00:00</updated>
    <id>http://towriting.com/blog/2015/10/11/android-6-dot-0-openssl-crash</id>
    
    <content type="html"><![CDATA[<p>Android 6.0发布将近半年，预计本月推出正式版本。所以开发者们要重视起APP在Android 6.0下的兼容性问题。最近我们的App就遭遇到因6.0更换了OpenSSL库而导致的一个Crash。</p>

<h2>Crash的原因：</h2>

<p>异常</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java.lang.unsatisfiedlinkerror dlopen failed cannot locate symbol <span class="s2">&quot;openssl_add_all_algorithms_noconf&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你的产品依赖了openssl，而google在Android 6.0中使用了google自己的一个基于openssl分支boringssl，而这个分支在API和ABI上都不兼容openssl。
<img src="http://towriting.com/images/posts/android_6/openssl_crash.png"></p>

<h2>Google为什么切换openssl</h2>

<ol>
<li>众所周知openssl存在着很多的问题，包括去年爆出的<a href="https://www.us-cert.gov/ncas/alerts/TA14-098A">Heartbleed</a>。目前依然有大量补丁没有被合入openssl主干，而google觉得其中很多补丁非常重要，所以google创建新的分支合入这些补丁。</li>
<li>google以为这个改动很小，绝大多数开发者是不会受影响的。（但据说google自己的youtube一样受影响，可见google想当然了).</li>
<li>google只对NDK标准接口负责，第三方库的接口，google是不保证的。</li>
</ol>


<h2>你的APK中招了吗?</h2>

<p>是不是你还在窃喜自己没有基于NDK开发的so，所以没有依赖openSSL。但你可能使用了第三方的so库，而这些库可能用到了openSSL。所以你的产品可能直接或间接依赖openssl. 这里有一个在线检测工具，可以测试自己是否中招。<a href="https://searchlight.sourcedna.com/search">Find apps with the OpenSSL / Android M crash flaw</a>;</p>

<h2>解决方案</h2>

<ol>
<li>静态链接openssl。优点是一劳永逸的解决问题，缺点是APK的增大size。</li>
<li>APK中打包libssl.so、libcrypto.so。如果你依赖的第三方库依赖了openssl, 而你没有权限去改它的代码，这是你唯一的解决方法。同样有size的问题。</li>
<li>NDK中使用jni调用java层的加密相关代码，缺点是复杂。</li>
</ol>


<p>参考：</p>

<ol>
<li><a href="https://code.google.com/p/android-developer-preview/issues/detail?id=2410">Sygic and Waze navigation apps not working on Android M</a></li>
<li><a href="https://sourcedna.com/blog/20150806/predicting-app-crashes-on-android-m.html">Finding a Hidden Flaw that Will Crash Apps on Android M</a></li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[读<程序员的呐喊>]]></title>
    <link href="http://towriting.com/blog/2015/09/10/a-programmers-rantings/"/>
    
    <updated>2015-09-10T22:06:45+00:00</updated>
    <id>http://towriting.com/blog/2015/09/10/a-programmers-rantings</id>
    
    <content type="html"><![CDATA[<p>又是一本国外技术圈的名人的博客整理成的书。作者steve yegge是google的程序员，06年之前的7年工作在amazon。丰富的编程经验和自由的个性，使他对各种编程语言和互联网产品有自己独到的见解。</p>

<p>&lt;程序员的呐喊>之呐喊英文书名原为咆哮(Rantings)，应该指的是steve yegge对各种语言的<code>攻击</code>。除了对ruby流露出无尽的爱慕外，steve yegge对其它语言无不加以批判：Java的名词王国，Python圈子的傲慢刚愎，Perl像一个各种语言的垃圾填埋厂。除了攻击语言，他还&#8217;攻击&#8217;自己的所在的公司，除了流露出对旧东家老大贝佐斯的不满，还经常对google的各种产品指指点点。</p>

<p>当然，以上steve yegge的各种吐槽咆哮都是有理有据有礼有节的。从Jeff Atwood<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>到steve yegge，国内还有coolshell的陈皓，都是技艺精湛、勤于思考、笔耕不辍，在圈子里很有影响力的大牛，放到古代定是名噪一时使洛阳纸贵的才子。而籍籍无名之辈的你我，如不奋起直追，定日复一日年复一年，骈死于需求槽枥之间。</p>

<p>与有缘之人共勉！</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>blog.codinghorror.com, 博客集整理成书，中文版&lt;高效能程序员的修炼><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[MongoDB中的$in和$elemMatch]]></title>
    <link href="http://towriting.com/blog/2015/01/14/mongodb-in-elem/"/>
    
    <updated>2015-01-14T23:02:51+00:00</updated>
    <id>http://towriting.com/blog/2015/01/14/mongodb-in-elem</id>
    
    <content type="html"><![CDATA[<p>PC客户端开发多年，一直想涉足下Web开发，进入15年，想起14年有一个计划是用ruby写一个网站，已经无法完成了！亡羊补牢也不晚，于是动手搞起，打算山寨goodreads的<a href="http://goodreads.com/quotes">quotes</a>板块，已经草草的实现了部分功能-<a href="http://quotes.towriting.com">看这里</a>, 其中数据库部分使用到是MongoDB, 使用MongoDB的原因是新鲜、好玩、简单，MongoDB确实比较容易理解，花2个小时看了一遍<a href="https://github.com/karlseguin/the-little-mongodb-book/blob/master/en/mongodb.markdown">the-little-mongodb-book</a>就可以上手干活了。</p>

<p>但高级些的用法还是需要细读官方文档，不然还是会出错，最近自己就在$in和$elemMatch上栽跟头，花费了大把时间。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ _id: 1, quote: "不要着急，最好的总会在最不经意的时候出现", author: 泰戈尔, tags: [ "哲理", "人生" ]}</span></code></pre></td></tr></table></div></figure>


<p>比如（上面的例子)，我需要根据tag<code>哲理</code>查找tags中包含<code>哲理</code>的记录，怎样写query语句呢？借助于万能的google，$in和$elemMatch很快进入了我的视线，从字面理解，$in是查询指定field是否在某个集合中，看mongo的官方文档$in的用法也确实是这样讲的：</p>

<blockquote><p>The $in operator selects the documents where the value of a field equals any value in the specified array.</p></blockquote>

<p>一眼看去，并不适于我们的需求。再看看$elemMatch：</p>

<blockquote><p>The $elemMatch operator matches documents in a collection that contain an array field with at least one element that matches all the specified query criteria.</p></blockquote>

<p>$elemMatch专门用于查询数组Field中元素是否满足指定的条件。看起来适合我们的需求，像这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> db.items.find({"tags": {$elemMatch: {$equal: "哲理"}}}) ;错误</span></code></pre></td></tr></table></div></figure>


<p>上面的用法是错误的，因为mongo并没有$equal查询指令, 所以我们无法用$elemMatch达成我们的需求。</p>

<p>当发现$elemMatch无法满足功能需求时，自己陷入了错误的方向：怀疑用错了$elemMatch, 然后就一直在网上看别人如何使用$elemMatch的, 而没有回头看下$in到用法，直到走投无路时。我发现$in到第二个用处：</p>

<blockquote><p>Use the $in Operator to Match Values in an Array</p></blockquote>

<p>并且官方示例和自己的需求场景几乎一模一样，接着当然自己很快实现了按tag查找的功能：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.items.find({"tags": {$in: ["哲理"]}})</span></code></pre></td></tr></table></div></figure>


<p>总结下$in和$elemMatch：</p>

<ul>
<li>$in要查询的Field可以是普通值也可以是数组，而$elemMatch则是专门用于查询array Field的。</li>
<li>$in的查询相对简单，主要是查询值或数组中某个值是否在待查询列表中.</li>
<li>$elemMatch的查询则比较复杂，是查询Array Field中的元素是否满足一系列的查询条件。</li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Windbg关联dmp文件]]></title>
    <link href="http://towriting.com/blog/2014/12/07/windbg-dump-asso/"/>
    
    <updated>2014-12-07T22:58:38+00:00</updated>
    <id>http://towriting.com/blog/2014/12/07/windbg-dump-asso</id>
    
    <content type="html"><![CDATA[<p>最近一段时间和Crash斗争，每天必不可少的事情是分析dump，每天少则分析几个，多则分析几十个是常有的。而打开dump到进入windbg cmd窗口输入!analyze -v命令是机械枯燥的事情。Windbg是没有默认关联.dmp文件的，只能自己动手了。分享关联方法之前，看下我现在dump文件的打开方式：</p>

<p><img src="http://towriting.com/images/posts/windbg-dump-asso/windbg_dmp.png" title="" ></p>

<p>我设置了三种打开方式：</p>

<ul>
<li>直接使用Windbg打开dump</li>
<li>使用windbg打开dump并进行分析</li>
<li>使用windbg打开dump，切换到32位，然后分析（针对加载的wow64)</li>
</ul>


<h3>配置dmp关联的方法</h3>

<h4>1. 设置dmp文件的关联</h4>

<p>Windows下文件的关联指的是在explorer下，双击或通过右键打开文件时选择指定程序打开。文件的关联方式可以通过注册表进行配置，在HKEY_CLASSES_ROOT、HKEY_CURRENT_USER\Software\Classes、HKEY_LOCAL_MACHINE\Software\Classes有以 &ldquo;.文件格式&rdquo; 命名的键和另一个自定义的键里面保存具体的配置，用来配置这个文件格式的关联，比如我们要配置的dmp文件的关联，最终会是这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HKEY_CURRENT_USER\Software\Classes
</span><span class='line'>   dmpfile
</span><span class='line'>     DefaultIcon
</span><span class='line'>       default = "C:\Program Files (x86)\Debugging Tools for Windows (x86)\windbg.exe",0
</span><span class='line'>     shell
</span><span class='line'>       Analyze with windbg
</span><span class='line'>           command
</span><span class='line'>              default=C:\Program Files (x86)\Debugging Tools for Windows (x86)\windbg.exe" -c "!analyze -v" -z "%1\"
</span><span class='line'>       Analyze with windbg - wow64
</span><span class='line'>           command
</span><span class='line'>              default="C:\Program Files (x86)\Debugging Tools for Windows (x86)\windbg.exe" -c "!wow64exts.sw; !analyze -v" -z "%1"
</span><span class='line'>       open
</span><span class='line'>           command
</span><span class='line'>              default="C:\Program Files (x86)\Debugging Tools for Windows (x86)\windbg.exe" -z "%1"
</span><span class='line'>   .dmp
</span><span class='line'>     default = dmpfile</span></code></pre></td></tr></table></div></figure>


<p>当然，更改HKEY_CURRENT_USER是对当前用户有效，HKEY_LOCAL_MACHINE是对所有用户有效，而HKEY_CLASSES_ROOT是兼容的产物，不推荐在直接配置HKEY_CLASSES_ROOT。</p>

<h4>2. 去除用户自定义的打开方式-自定义程序</h4>

<p> 如果你设置过打开方式里面的自定义程序，必须先删除这一项，否则我们上一步设置的文件关联将不会生效，打开方式自定义程序的配置也是保存在注册表中，具体位置在：</p>

<p> <code>
 HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dmp\UserChoice
</code></p>

<p>将这个UserChoice键删除即可。</p>

<h4>3. 到这里就讲完了，最后奉上一个bat:</h4>

<figure class='code'><figcaption><span> (windbg-dump-asso.bat)</span> <a href='http://towriting.com/downloads/code/script/windbg-dump-asso.bat'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">dbgpath</span><span class="o">=</span>\<span class="s2">&quot;C:\Program Files (x86)\Debugging Tools for Windows (x86)\windbg.exe\&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>REG ADD <span class="s2">&quot;HKCU\Software\Classes\.dmp&quot;</span> <span class="n">/f</span> <span class="n">/d</span> dmpfile
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">val</span><span class="o">=</span><span class="nv">%dbgpath%</span><span class="p">,</span><span class="m">0</span>
</span><span class='line'>REG ADD <span class="s2">&quot;HKCU\Software\Classes\dmpfile\DefaultIcon&quot;</span> <span class="n">/f</span> <span class="n">/d</span> <span class="s2">&quot;%val%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">val</span><span class="o">=</span><span class="nv">%dbgpath%</span> -z \<span class="s2">&quot;%%1\&quot;</span>
</span><span class='line'>REG ADD <span class="s2">&quot;HKCU\Software\Classes\dmpfile\Shell\open\command&quot;</span> <span class="n">/f</span> <span class="n">/d</span> &quot;<span class="nv">%val%</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">val</span><span class="o">=</span><span class="nv">%dbgpath%</span> -c \<span class="s2">&quot;!wow64exts.sw; !analyze -v\&quot;</span> -z \<span class="s2">&quot;%%1\&quot;</span>
</span><span class='line'>REG ADD <span class="s2">&quot;HKCU\Software\Classes\dmpfile\Shell\Analyze With Windbg  - wow64\command&quot;</span> <span class="n">/f</span> <span class="n">/d</span> <span class="s2">&quot;%val%&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nv">val</span><span class="o">=</span><span class="nv">%dbgpath%</span> -c \<span class="s2">&quot;!analyze -v\&quot;</span> -z \<span class="s2">&quot;%%1\&quot;</span>
</span><span class='line'>REG ADD <span class="s2">&quot;HKCU\Software\Classes\dmpfile\Shell\Analyze With Windbg\command&quot;</span> <span class="n">/f</span> <span class="n">/d</span> <span class="s2">&quot;%val%&quot;</span>
</span><span class='line'>
</span><span class='line'>REG DELETE <span class="s2">&quot;HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dmp\UserChoice&quot;</span> <span class="n">/f</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="n">/p</span> finish<span class="o">=</span><span class="s2">&quot;finsh!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：</p>

<p><a href="http://msdn.microsoft.com/en-us/library/cc144158%28VS.85%29.aspx">http://msdn.microsoft.com/en-us/library/cc144158%28VS.85%29.aspx</a></p>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff561306.aspx">http://msdn.microsoft.com/en-us/library/windows/hardware/ff561306.aspx</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Windbg定位内存泄露的一种简单方法]]></title>
    <link href="http://towriting.com/blog/2014/11/22/windbg-memory-leak/"/>
    
    <updated>2014-11-22T20:51:47+00:00</updated>
    <id>http://towriting.com/blog/2014/11/22/windbg-memory-leak</id>
    
    <content type="html"><![CDATA[<p>前两天接到一个反映进程内存占用过G的投诉。问题是必現的，一定是内存泄露，应该容易定位，一同事远程看过现场，使用gflags和windbg试图找到泄露的堆栈，同事是一步步按照<a href="http://www.codeproject.com/Articles/31382/Memory-Leak-Detection-Using-Windbg">这篇文章的方法</a>来的，但在最后一步Windbg没有找到出问题的堆栈，用户给我们远程的时间很短，无法深究gflags+windbg不灵验的原因，只得另辟蹊径。</p>

<h2>步骤如下：</h2>

<h3>0. 安装windbg, 设置symbols, 用windbg attach到发生内存泄露的进程</h3>

<h3>1. 打印出heap的使用情况</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0:003&gt; !heap -s
</span><span class='line'>LFH Key : 0x7ce97b7b
</span><span class='line'>LFH Key : 0x7ce97b7b
</span><span class='line'>Termination on corruption : ENABLED
</span><span class='line'>Heap     Flags    Reserv Commit  Virt   Free   List    UCR    Virt  Lock Fast
</span><span class='line'>                  <span class="o">(</span>k<span class="o">)</span>    <span class="o">(</span>k<span class="o">)</span>     <span class="o">(</span>k<span class="o">)</span>    <span class="o">(</span>k<span class="o">)</span>    length  blocks cont. heap
</span><span class='line'>-----------------------------------------------------------------------------
</span><span class='line'>002c0000 00000002 1024    372     1024   54    13      1      0     0    LFH
</span><span class='line'>00010000 00008000 64      4       64 2   1     1       0      0
</span><span class='line'>00020000 00008000 64      64      64     62    1       1      0     0
</span><span class='line'>004d0000 00001002 1088    152     1088   7     4       2      0     0    LFH
</span><span class='line'>007c0000 00001002 1088    188     1088   18    7       2      0     0    LFH
</span><span class='line'>00880000 00001002 1280    276     1280   14    5       2      0     0    LFH
</span><span class='line'>01db0000 00001002 64      12      64     2     3       1      0     0
</span><span class='line'>021f0000 00001002 15488   12024   15488  144   7       5      0     0    LFH
</span><span class='line'>00810000 00001002 64      12      64     2     3       1      0     0
</span></code></pre></td></tr></table></div></figure>


<p>很明显这一行：<strong>021f0000 00001002 15488   12024   15488  144   7       5      0     0    LFH</strong>是有异常的。</p>

<h3>2. 显示异常heap的信息</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:003&gt; !heap -stat -h 021f0000
</span><span class='line'>heap @ 021f0000
</span><span class='line'>heap @ 021f0000
</span><span class='line'>group-by: TOTSIZE max-display: 20
</span><span class='line'>  size   #blocks  total  ( %) (percent of total busy bytes)
</span><span class='line'>  a45c   11d   -  b6fa6c (99.75)
</span><span class='line'>  75a8   1     -  75a8   (0.25)
</span><span class='line'>  20     1     -  20     (0.00)</span></code></pre></td></tr></table></div></figure>


<p>上面11d块size为a45c的内存极有可能是泄露的内存。</p>

<h3>3. 根据泄露内存的Size找到CallStack</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0:003&gt; bp ntdll!RtlAllocateHeap "j(poi(@esp+c) = 0x0a45c) 'k';'gc'"
</span><span class='line'>0:003&gt; g
</span><span class='line'>0:003&gt; g
</span><span class='line'>Unable to deliver callback, Unable to deliver callback, 3131
</span><span class='line'>
</span><span class='line'>ChildEBPChildEBP RetAddrRetAddr
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021de54 1000ba7e 0021de54 1000ba7e ntdll!RtlAllocateHeapntdll!RtlAllocateHeap
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>WARNING: Stack unwind information not available. Following frames may be wrong.
</span><span class='line'>WARNING: Stack unwind information not available. Following frames may be wrong.
</span><span class='line'>0021de6c 1000bbcc 0021de6c 1000bbcc mfnspstd32mfnspstd32++0xba7e0xba7e
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021de8c 1000beb1 0021de8c 1000beb1 mfnspstd32mfnspstd32++0xbbcc0xbbcc
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021deb8 1000ea4d 0021deb8 1000ea4d mfnspstd32mfnspstd32++0xbeb10xbeb1
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021dee4 75de9986 0021dee4 75de9986 mfnspstd32!WSPStartupmfnspstd32!WSPStartup++0x9d0x9d
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e3b8 75de975b 0021e3b8 75de975b WS2_32!DPROVIDER::InitializeWS2_32!DPROVIDER::Initialize++0x1850x185
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e3d8 75df5a2f 0021e3d8 75df5a2f WS2_32!DCATALOG::LoadProviderWS2_32!DCATALOG::LoadProvider++0x6d0x6d
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e678 75df5fe8 0021e678 75df5fe8 WS2_32!DCATALOG::FindIFSProviderForSocketWS2_32!DCATALOG::FindIFSProviderForSocket++0x630x63
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e68c 75de4204 0021e68c 75de4204 WS2_32!DSOCKET::FindIFSSocketWS2_32!DSOCKET::FindIFSSocket++0x370x37
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e6cc 00d48444 0021e6cc 00d48444 WS2_32!setsockoptWS2_32!setsockopt++0xb00xb0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e6ec 00d4900c 0021e6ec 00d4900c t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x7c140x7c14
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e71c 00d3e50c 0021e71c 00d3e50c t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x87dc0x87dc
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e738 00d4a654 0021e738 00d4a654 t**b++0x4e50c0x4e50c
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021e768 00d44f79 0021e768 00d44f79 t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x9e240x9e24
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021f8c8 00d4a6a4 0021f8c8 00d4a6a4 t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x47490x4749
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021f8d8 00cfb1f7 0021f8d8 00cfb1f7 t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x9e740x9e74
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021f91c 7700ee1c 0021f91c 7700ee1c t**b++0xb1f70xb1f7
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021f928 7731377b 0021f928 7731377b kernel32!BaseThreadInitThunkkernel32!BaseThreadInitThunk++0xe0xe
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021f968 7731374e 0021f968 7731374e ntdll!__RtlUserThreadStartntdll!__RtlUserThreadStart++0x700x70
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>0021f980 00000000 0021f980 00000000 ntdll!_RtlUserThreadStartntdll!_RtlUserThreadStart++0x1b0x1b</span></code></pre></td></tr></table></div></figure>


<h3>4. 最后甄别CallStack是否真正的发生内存泄露</h3>

<h2>总结</h2>

<p>此方法适宜，泄露亦重现，且泄露的size固定的情况</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[C++API设计 - 笔记]]></title>
    <link href="http://towriting.com/blog/2014/11/15/api-design-for-c-plus-plus-notes/"/>
    
    <updated>2014-11-15T20:24:38+00:00</updated>
    <id>http://towriting.com/blog/2014/11/15/api-design-for-c-plus-plus-notes</id>
    
    <content type="html"><![CDATA[<p><a href='http://www.amazon.cn/gp/product/B00EE13U30/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00EE13U30&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>C++ API设计</a>从书名看是关于设计C++接口的书，内容却不仅仅是关于C++接口设计。书还算实用，但如果看过代码大全和Effective系列的话，可以不用在看这本书了。</p>

<h2>笔记</h2>

<p>P91 重构就像汽车高速行驶时更换引擎，但还不能停车</p>

<p>P103 API的第一个发行版本很重要</p>

<p>P115 LISKOV替换原则指出，如果S是T的子类，那么在行为上，S不需要修改就可以替换T类型的对象</p>

<p>P117 私有继承、Was-a的关系</p>

<p>P119 开发封闭原则是一种启发式的原则，则不是必须遵守的</p>

<p>P121 一个好的名字往往可以表达类的意图，如果一个类难以命名，这往往是缺乏设计的信号</p>

<p>P122 函数尽量使用正面的概念命名，比如IsConnect而不是IsUnConnect</p>

<p>P132 C API比C++ API具有更好的二进制兼容性</p>

<p>P140 可以使用预处理器技术模拟模板</p>

<p>P176 避免使用友元，这往往意味这糟糕的设计</p>

<p>P182 如果没有必要使用Dynamic_Cast则常见的做法是关闭运行时信息生成</p>

<p>P182 不要猜测性能瓶颈的位置</p>

<p>P183 传值可能会导致对象切割而引起莫名其妙的问题</p>

<p>P185 不应该前置声明STL的类型</p>

<p>P192 C++11中一个构造函数可以调用其他的构造函数</p>

<p>P192 对象越小，就越适合缓存</p>

<p>P197 Donald Knuth有句名言：过早优化是万恶之源</p>

<p>P211 Linux 的奇数版本号代表开发版本</p>

<p>P216 如果确实需要做二进制不兼容，则需要考虑给信库起个新名字。比如zlib.dll &ndash;> zlib1.dll</p>

<p>P225 弃用标记：__declspec(deprecated)</p>

<p>P250 时间驱动、质量驱动和功能驱动</p>

<p>P257 性能测试的结果是实数而不是简单的真和假</p>

<p>P264 驱动测试开发的好处是推动你考虑接口会被如何调用</p>

<p>P286 SWIG</p>

<p>P286 任何脚本绑定技术都是建立在适配器模式上的</p>

<p>P286 Boost.Python支持Boost和Python的互相交互</p>

<p>P265 模拟对象又可以简单称为MOCK</p>

<p>P339 每个DLL有相应的到入库lib文件，虽然静态库和导入库的格式都是lib但他们的文件类型是不同的</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[读《摩托车修理店的未来工作哲学》]]></title>
    <link href="http://towriting.com/blog/2014/10/26/shop-class-as-soulcraft-notes/"/>
    
    <updated>2014-10-26T20:50:12+00:00</updated>
    <id>http://towriting.com/blog/2014/10/26/shop-class-as-soulcraft-notes</id>
    
    <content type="html"><![CDATA[<p><a href='http://www.amazon.cn/gp/product/B00KF0MTR2/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00KF0MTR2&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>&lt;摩托车修理店的未来工作哲学></a>是一本大抵关于工作的书。</p>

<h3>薪水的意义</h3>

<p>记得刚毕业的头一年月薪虽少，但内心竟极不安：我每天干的这点事情配这些钱吗？ 到现在又换过两次工作，薪水比刚毕业高了不少，起初还是惶恐自己干的活不配拿这份工资，但随着时间的推移，慢慢麻木不再深思这件事情，将原因归结为人力市场经济的供求关系。现在看到此书中观点，自己可以心安理得的拿这份薪水了：对个体而言，薪水是一种把人限制在一个地方、一定时间做自己并不是特别享受的事情的补偿。</p>

<p>平素里讲的对某工作感兴趣都是相对而言，如果对工作的享受可以达到玩游戏、K歌、美食的程度那一定是自欺欺人。对工作如此兴致的话，想必不要工资也会全心投入，因为平时可以给你带来如此享受的东西都是要钱的。</p>

<p>站在公司的角度看，用薪水吸引人，也是无奈之举。来人是冲着薪水来的，并不是工作本身。</p>

<h3>快乐的工作</h3>

<p>选择程序员的工作无疑是幸福的。程序员号称是当代唯一的手工艺者，互联网公司的办公环境也相对自由，不必忍受像富士康等流水线工作中十年从事一个标准动作的枯燥。</p>

<p>程序员可以快乐工作的条件很简单，有代码可写、在不被打扰的工作环境里思考着软件的结构和编码。回想自己这几年来的3份工作，第一份工作上班并没有太多的事情可做，或者是布置的东西太虚，导致自己内心也空虚，终日惶惶。第二份工作，流程清晰，需求明确，类似于流水线操作不大会出问题。现在的工作，不断有有新挑战，安心下来写代码会很幸福，无奈流程待拨乱反正，每天被打断N次、往返于各种会议与讨论之中。</p>

<p>所以，程序员快乐的编码不容易。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[互联网公司“24小时待命”的陋习]]></title>
    <link href="http://towriting.com/blog/2014/08/31/24-hour-stand-by/"/>
    
    <updated>2014-08-31T11:47:45+00:00</updated>
    <id>http://towriting.com/blog/2014/08/31/24-hour-stand-by</id>
    
    <content type="html"><![CDATA[<p>24小时待命可能有些夸张，但它确实是以一种不成文的规定存在于一部分互联网公司。记得去年培训时，来自深圳总部的培训老师，自豪的说TX许多部门里员工都是24小时待命，随时应对解决问题。听一些其它公司的朋友讲，他们也有非上班时间被叫回公司的现象。所以24小时待命在一些地方可能形成了习俗。习俗很可怕，哪怕明知是错误的人们也无力反抗，比如裹脚。</p>

<h3>有时真的需要24小时待命</h3>

<p>在一些<code>小而美</code>的团队，早期面对众多的对手，必须有快速的执行力，才可以抢占先机，可以说24小时待命是小团队早期阶段不会死掉的必备条件。</p>

<p>还有一种情况下，相关人员必须随叫随到，就是线上产品出现了严重问题，这是必须要立即处理的，出现了这种问题，相信大家每个人都会很着急，会主动赶回去的。这主要涉及运维和相关开发。</p>

<h3>头痛医脚的昏招</h3>

<p>但除了这两种情况，我看不出这种随意拉员工到公司的习惯有什么好处，相反会极大的侵害员工的积极性。如果在一个非创业期的团队经常出现周末随意拉员工回去加班的情况，那一定是<strong>产品和项目管理出现了严重问题</strong>。拉员工回去对于解决问题，治标不治本，相反还让人产生反感，让人有种疲于奔命之感。</p>

<p>除此之外还有一种情况容易滋生24小时待命文化:老板的淫威。这是我熟识的一个朋友身上发生的事，他经常在坐了一个小时公交快到家门口的时候，被老板叫回去开临时会议，而且一开就到半夜12点了。后来朋友离开了那家公司，想必他不愿意再过那种随叫随到的生活，毕竟家里还有娇妻幼子。</p>

<p>我现在也有些反感，周六早上被拉进微信群讨论产品问题，为什么不周五讨论？如果是紧急问题，我会立马回去处理的，但往往事情并不是那么紧急，往往是因为老板的不经意一句话，产品人员热情的跟进了，于是我们开发人员就到了公司加班。</p>

<h3>陋习的危害</h3>

<p>对于这种24小时待命的习俗，是没有人敢于站出来反对的，因为稍有质疑就会被扣上<code>不积极</code>、<code>没有责任心</code>的帽子，以后在公司就别想混了。所以对于这种东西，大家往往<strong>道路以目</strong>。长久下去，必会影响公司的发展，挫败团队的斗志。</p>

<p>仔细想一下，24小时待命和<code>不积极</code>、<code>没有责任心</code>责任心并没有必然关系，岗位不同，责任不同，就我们开发而言，责任心应该体现在按时保质的完成开发任务（协助处理一些突发事故）。QA的主要责任感是按时完成测试，如果一个团队推行24小时待命，那什么东西是非得半夜过来测的？</p>

<p>相反我觉得员工对&#8221;24小时待命&#8221;文化的逆来顺受是一种逃避和不负责任的做法。没人去深层次的分析和解决产生临时拉人加班的原因，只会使团队滑向更深的深渊。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[C++14-大餐后的甜点]]></title>
    <link href="http://towriting.com/blog/2014/08/25/cpp-14-dessert/"/>
    
    <updated>2014-08-25T23:15:41+00:00</updated>
    <id>http://towriting.com/blog/2014/08/25/cpp-14-dessert</id>
    
    <content type="html"><![CDATA[<p>这次C++标准委员会快速的通过了最新的C++标准:C++14，要知道C++11可是一再跳票后的产物。此次快速的发布的缘由可能和C++14的改动较小有关，C++之父Bjarne Stroustrup也说，相比与C++11来说，C++14的改动是<a href="http://electronicdesign.com/dev-tools/bjarne-stroustrup-talks-about-c14">谨小甚微的</a>。相信C++14不会给我们带来像C++11那样的震撼，所以我们只能期待下一个版本C++17了。</p>

<p><img class="pull-right" src="http://towriting.com/images/posts/cpp-14-dessert/wg21-timeline.png"></p>

<p>但Bjarne还说了，C++永远是心向开发者的，C++14将给开发者大开方面之门。关于C++14更详细的细节可以看维基百科:<a href="http://en.wikipedia.org/wiki/C%2B%2B14">C++14</a>,这里讲下自己感兴趣的特性：</p>

<h3>语言改变</h3>

<p><strong>范型lambda</strong></p>

<p>在C++11下，如果你想要打印出一个数的平方，可能需要这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">square_int</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'><span class="k">auto</span> <span class="n">square_double</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">square_int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">square_int</span><span class="p">(</span><span class="mf">10.1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了保持函数的局部性，我们才选择的lambda，但C++11的lambda却导致多个类型时代码膨胀且重复，此时我们需要回过头来借助全局的模板了。</p>

<p>但C++14可以完美的解决上面的问题，因为C++14中lambda的参数可以用auto代替具体的类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">square</span> <span class="o">=</span> <span class="p">[](</span><span class="k">auto</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">square_int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">square_int</span><span class="p">(</span><span class="mf">10.1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>auto返回类型</strong></p>

<p>C++11支持auto关键字，用于变量的自动类型推导。但由于时间限制，C++标准委员会并没有让auto也支持函数的返回值类型自动推导，现在C++14支持了。这将会在返回类内部类型的成员函数书写上减少好多工作量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">Wiget</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">enum</span> <span class="n">Status</span><span class="p">{</span><span class="n">show</span><span class="p">,</span> <span class="n">hide</span><span class="p">}</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">getStatus</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">auto</span> <span class="n">Wiget</span><span class="o">::</span><span class="n">getStatus</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">show</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>编译器支持</h3>

<p>曾经被标准折磨的死去活来的编译器如今越挫越勇。标准出来的快，编译器支持的更快。CLang（3.4）半年前就宣布已完全支持C++14(draft)特性（语言和库）。本人电脑上的GCC4.9.1也已部分支持C++14特性。但公司的开发环境要支持C++14可就难了。</p>

<p>参考：</p>

<p><a href="https://isocpp.org/std/status">https://isocpp.org/std/status</a></p>

<p><a href="http://cpprocks.com/c1114-compiler-and-library-shootout/">http://cpprocks.com/c1114-compiler-and-library-shootout/</a></p>

<p><a href="http://cpprocks.com/an-overview-of-c14-language-features/">http://cpprocks.com/an-overview-of-c14-language-features/</a></p>

<p><a href="http://llvm.org/releases/3.4/tools/clang/docs/ReleaseNotes.html">http://llvm.org/releases/3.4/tools/clang/docs/ReleaseNotes.html</a></p>

<p><a href="https://solarianprogrammer.com/2014/08/28/cpp-14-lambda-tutorial/">https://solarianprogrammer.com/2014/08/28/cpp-14-lambda-tutorial/</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[实现无锁算法的常见陷阱]]></title>
    <link href="http://towriting.com/blog/2014/08/18/common-pitfalls-in-writing-lock-free-algorithms/"/>
    
    <updated>2014-08-18T23:34:52+00:00</updated>
    <id>http://towriting.com/blog/2014/08/18/common-pitfalls-in-writing-lock-free-algorithms</id>
    
    <content type="html"><![CDATA[<h2>翻译自：<a href="http://blog.memsql.com/common-pitfalls-in-writing-lock-free-algorithms/">Common Pitfalls in Writing Lock-Free Algorithms</a></h2>

<p>通常，只要两个操作之间的步骤是有穷的，一个多线程算法就认为可以实现为无锁(lock-free)。理论上无锁算法也早已被证明，看起来实现一个无锁算法也很简单。但其实不然，每一步都隐藏着陷阱：并发的线程可以修改共享的对象，甚至在执行一个操作时线程可以突然暂停或中止，而这是另一个线程当作好像若无其事。</p>

<p>线程同步是多线程程序设计的核心，传统的做法上就是代码临界区上加锁。锁可以防止多个线程同一时间进入临界区代码。在高度并发的程序里，锁可能成为严重的性能瓶颈。无锁编程的目标是不用锁也能解决并发问题。无锁编程一般依赖的是原子操作，比如“compare-and-swap”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>原子的执行下面的操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mi">1</span> <span class="kt">bool</span> <span class="nf">CompareAndSwap</span><span class="p">(</span><span class="n">Value</span><span class="o">*</span> <span class="n">addr</span><span class="p">,</span> <span class="n">Value</span> <span class="n">oldVal</span><span class="p">,</span> <span class="n">Value</span> <span class="n">newVal</span><span class="p">){</span>
</span><span class='line'><span class="mi">2</span>     <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">addr</span> <span class="o">==</span> <span class="n">oldVal</span><span class="p">){</span>
</span><span class='line'><span class="mi">3</span>         <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="n">newVal</span><span class="p">;</span>
</span><span class='line'><span class="mi">4</span>         <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="mi">5</span>     <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="mi">6</span>         <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="mi">7</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">8</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用无锁算法的最大缺陷是：</p>

<ul>
<li>无锁算法并不总是可实现的</li>
<li>无锁算法的代码很难写</li>
<li>写出正确的无锁算法代码更是难如登天</li>
</ul>


<p>为了证明以上三点，我们来看一个错误实现的一个无锁栈(lock-free stack)，可能大部分人第一次都会写出这样保护这些错误无锁栈。这个无锁栈算法主要是使用一个链表(linked-list)来存放节点，并用<code>CompareAndSwap</code>来修改链表的表头。 Push一个元素时，我们首先创建一个节点保存数据，并将这个节点设为栈顶，并使用<code>CompareAndSwap</code>将原栈顶指向新的元素。<code>CompareAndSwap</code>操作保证只有我们的新节点指向老的栈顶节点，才会替换老的栈顶（因为多线程可能改变老的栈顶）。当Pop一个元素时，我们快照当前的栈顶节点，然后替换当前的栈顶节点到下一个节点。我们再一次使用<code>CompareAndSwap</code>保证替换的节点等于快照的节点。</p>

<p>C++代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'> <span class="mi">1</span> <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Entry</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">2</span> <span class="k">class</span> <span class="nc">LockFreeStack</span><span class="p">{</span>
</span><span class='line'> <span class="mi">3</span>     <span class="k">struct</span> <span class="n">Node</span><span class="p">{</span>
</span><span class='line'> <span class="mi">4</span>         <span class="n">Entry</span><span class="o">*</span> <span class="n">entry</span><span class="p">;</span>
</span><span class='line'> <span class="mi">5</span>         <span class="n">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'> <span class="mi">6</span>     <span class="p">};</span>
</span><span class='line'> <span class="mi">7</span>
</span><span class='line'> <span class="mi">8</span>     <span class="n">Node</span><span class="o">*</span> <span class="n">m_head</span><span class="p">;</span>
</span><span class='line'> <span class="mi">9</span>
</span><span class='line'><span class="mi">10</span>     <span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="n">Entry</span><span class="o">*</span> <span class="n">e</span><span class="p">){</span>
</span><span class='line'><span class="mi">11</span>         <span class="n">Node</span><span class="o">*</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">;</span>
</span><span class='line'><span class="mi">12</span>         <span class="n">n</span><span class="o">-&gt;</span><span class="n">entry</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'><span class="mi">13</span>         <span class="k">do</span><span class="p">{</span>
</span><span class='line'><span class="mi">14</span>             <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">m_head</span><span class="p">;</span>
</span><span class='line'><span class="mi">15</span>         <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">CompareAndSwap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m_head</span><span class="p">,</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">n</span><span class="p">));</span>
</span><span class='line'><span class="mi">16</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">17</span>
</span><span class='line'><span class="mi">18</span>     <span class="n">Entry</span><span class="o">*</span> <span class="nf">Pop</span><span class="p">(){</span>
</span><span class='line'><span class="mi">19</span>         <span class="n">Node</span><span class="o">*</span> <span class="n">old_head</span><span class="p">;</span>
</span><span class='line'><span class="mi">20</span>         <span class="n">Entry</span><span class="o">*</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="mi">21</span>         <span class="k">do</span><span class="p">{</span>
</span><span class='line'><span class="mi">22</span>             <span class="n">old_head</span> <span class="o">=</span> <span class="n">m_head</span><span class="p">;</span>
</span><span class='line'><span class="mi">23</span>             <span class="k">if</span><span class="p">(</span><span class="n">old_head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'><span class="mi">24</span>                 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="mi">25</span>             <span class="p">}</span>
</span><span class='line'><span class="mi">26</span>         <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">CompareAndSwap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m_head</span><span class="p">,</span> <span class="n">old_head</span><span class="p">,</span> <span class="n">old_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">));</span>
</span><span class='line'><span class="mi">27</span>
</span><span class='line'><span class="mi">28</span>         <span class="n">result</span> <span class="o">=</span> <span class="n">old_head</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">;</span>
</span><span class='line'><span class="mi">29</span>         <span class="k">delete</span> <span class="n">old_head</span><span class="p">;</span>
</span><span class='line'><span class="mi">30</span>         <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="mi">31</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">32</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>遗憾的是，这个无锁栈充满的错误：</p>

<h3>Segfault</h3>

<p>Push操作分配内存保存节点信息，Pop操作释放这些内存。然而，线程T1在顺序执行22行和26行之间的时间里，另一个线程T2可能已经释放了这个节点，然后程序Crash了。</p>

<h3>Corruption</h3>

<p>仅仅对比新值与老值是否相等，<code>CompareAndSwap</code>方法并不能保证是否值发生了变化。假如快照在22行的值，被修改了，然后又被恢复了，然后<code>CompareAndSwap</code>会成功。这就是著名的<strong>ABA问题</strong>。假如栈中前两个节点是A和C，如果以下面的序列操作：</p>

<ul>
<li>线程1执行Pop，并在22行读到了m_head(<strong>A</strong>)，在26行读到了old_head->next(<strong>C</strong>)，然后突然阻塞在执行在<code>CompareAndSwap</code>之前。</li>
<li>线程2执行pop，删掉节点<strong>A</strong>。</li>
<li>线程2调用push，push了一个新节点<strong>B</strong>。</li>
<li>线程2又调用一次push，这次push的新节点正好占用了原来节点<strong>A</strong>的内存。</li>
<li>线程1被唤醒，调用<code>CompareAndSwap</code>。</li>
</ul>


<p>然后26行的<code>CompareAndSwap</code>会成功，虽然m_head已经被改变3次了，因为它只检测old_head是否等于m_head。这是有问题的，因为新的栈顶本应指向<strong>B</strong>，然而却指向了<strong>C</strong>。</p>

<h3>Not lock-free</h3>

<p>C++标准并不保证new和delete是lock-free的。一个无锁的数据结构去调用非无锁的库函数不是什么好主意，所以我们需要一个无锁的内存分配子。</p>

<h3>Data races</h3>

<p>当一个线程向内存中写入数据，而另一个线程同时从相同的内存读数据时，所产生的结果是未定义的，除非使用std::atomic。读和写操作都必须是原子的。在C++11以前一个通用的方法是使用<strong>volatile</strong>关键字来生命原子变量，然而这个关键字有很大的<a href="http://software.intel.com/en-us/blogs/2007/11/30/volatile-almost-useless-for-multi-threaded-programming">缺陷</a>。</p>

<p>在我们的例子中，多个线程读栈顶指针可能会引起竞争，push和pop操作都有可能，因为其它线程可能在修改他。</p>

<h3>Memory reordering</h3>

<p>印象中，代码会按照我们指定的顺序执行，最少也会满足”<a href="http://en.wikipedia.org/wiki/Happened-before">happens before</a>“关系。不幸的是，不管理论还是实际上，下面代码的执行可能出现x,y都是0的结果。:</p>

<p><img class="pull-right" src="http://towriting.com/images/posts/common-pitfalls-in-writing-lock-free-algorithms/memory-reordering.png"></p>

<p>C++11以前标准对于多线程是讳莫如深的，所以编译器的优化是着眼于单线程的。上面的代码，交换执行顺序，并不会影响单线程中程序的语义。所以可能会产生这种结果。</p>

<h2>如何写正确的lock-free栈</h2>

<p>上面大部分问题都有多种解决方案，这里我会把自己工作中使用的方法描述出来。</p>

<h3>Segfault</h3>

<p>解引用节点之前，必须确保该节点没有被删掉。每一个线程都有一个全局可见的&#8221;hazard pointer&#8221;。当访问一个节点之前，会先设置Hazard pointer执行这个节点。只要设置过Hazard pointer就可以保证这个节点此时还是栈顶节点。如果其它线程此时移除这个栈顶节点，要检测没有Hazard pointer指向这个节点才能清除节点的内存。</p>

<h3>Corruption</h3>

<p>解决ABA问题的一个方法是确保栈顶不会有同样的值两次。我们使用“tagged pointers”来确保栈头值的唯一。一个“tagged pointers”包含一个指针和64位计数器。每当栈顶变化，计数器加一。</p>

<h3>Not lock-free</h3>

<h3>Data races</h3>

<p>我们目前使用的是boost::atomic。现在我们使用gcc4.6也已经支持std::atomic，但实现的效率没有boost高。在gcc4.6中，所有需要原子操作的地方都被应用了memory barriers，即使本不必使用的地方。</p>

<h3>Memory reordering</h3>

<p>C++11为原子操作提供了一种新的内存模型和内存序语义，以解决乱序的问题。CompareAndSwap需要顺序一致性(sequentially consistent)的语义保证。顺序一致性意味着所有的线程以一种一致的次序执行操作。事实证明hazard pointers也一样需要顺序一致性保证内存语义。
如果不使用内存一致性，下面这种情况下会有问题：</p>

<ul>
<li>线程1准备Pop操作，读取了栈顶节点</li>
<li>线程1将当前节点写到hazard pointer中</li>
<li>线程1再次读取栈顶指针</li>
<li>线程2将栈顶指针移走，并传递到垃圾收集线程</li>
<li>垃圾收集器扫描所有的hazard pointer节点，因为没有顺序一致性，可能看不到线程1的hazard pointer已经指向了这个节点</li>
<li>垃圾收集器删除了这个节点</li>
<li>线程1解引用这个节点，然后程序Crash</li>
</ul>


<p>而如果有顺序一致性应用到hazard pointer的赋值和节点的修改，竞争就不会发生了。因为任意两个操作，所有线程看到的顺序都是一样的。如果线程2先移除这个节点，那么线程1第二次读时会看到一个不同的节点，也就不会去解引用它。假如线程1先将节点写到hazard pointer中，则垃圾收集器肯定可以看到这个值而不会去删除它。</p>

<h2>性能</h2>

<p>到现在我们解决了所有的问题。让我们看一下性能。测试使用的是一台8核Intel&reg; Xeon&reg; 处理器。每个线程的工作是随机的执行数量几乎相等的Push和Pop操作。每个线程不加限制的执行机器可以处理的操作。</p>

<p><img class="pull-right" src="http://towriting.com/images/posts/common-pitfalls-in-writing-lock-free-algorithms/chart.svg"></p>

<p>我们修改栈顶的次数越多，CompareAndSwap失败的次数也会越多。一个简单有效的减少失败的方法是失败后Sleep一下，这可以调节Stack可以高效的处理数据。下面是每次失败后Sleep(250)的数据：</p>

<p><img class="pull-right" src="http://towriting.com/images/posts/common-pitfalls-in-writing-lock-free-algorithms/chart1.svg"></p>

<p>太好了，增加Sleep后栈的吞吐量增加了7倍。并且Sleep减少的处理器的消耗。让我们看一下处理器的使用情况：</p>

<p>加锁的栈：</p>

<p><img class="pull-right" src="http://towriting.com/images/posts/common-pitfalls-in-writing-lock-free-algorithms/htop_mutex.png"></p>

<p>无锁的栈，不加Sleep:</p>

<p><img class="pull-right" src="http://towriting.com/images/posts/common-pitfalls-in-writing-lock-free-algorithms/htop_lockfree.png"></p>

<p>无锁的栈，Sleep(250):</p>

<p><img class="pull-right" src="http://towriting.com/images/posts/common-pitfalls-in-writing-lock-free-algorithms/htop_usleep.png"></p>

<p>看起来无锁更好？等等，锁一样可以达到好的性能，我们不用std::mutex，我们使用Sleep(250)的自旋锁：
<img class="pull-right" src="http://towriting.com/images/posts/common-pitfalls-in-writing-lock-free-algorithms/chart2.svg"></p>

<h2>结果</h2>

<p>大量数据时，额外的线程会降低吞吐量。Sleep可以降低操作冲突，增加吞吐量的同时减小处理器消耗。3个线程以上的性能没有变化。单线程是性能最佳的。</p>

<h2>结论</h2>

<p>无锁不会阻碍进度，但也并不会提高效率。当你想在你的项目中使用无锁算法时，切记要衡量值不值的-性能还有复杂度。</p>

<h2>代码</h2>

<p>加锁的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'> <span class="mi">1</span> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">mutex</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">2</span> <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">stack</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">3</span>
</span><span class='line'> <span class="mi">4</span> <span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'> <span class="mi">5</span> <span class="k">class</span> <span class="nc">LockedStack</span><span class="p">{</span>
</span><span class='line'> <span class="mi">6</span> <span class="k">public</span><span class="o">:</span>
</span><span class='line'> <span class="mi">7</span>     <span class="kt">void</span> <span class="n">Push</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">entry</span><span class="p">){</span>
</span><span class='line'> <span class="mi">8</span>         <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">m_mutex</span><span class="p">);</span>
</span><span class='line'> <span class="mi">9</span>         <span class="n">m_stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">entry</span><span class="p">);</span>
</span><span class='line'><span class="mi">10</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">11</span>
</span><span class='line'><span class="mi">12</span>     <span class="c1">// For compatability with the LockFreeStack interface,</span>
</span><span class='line'><span class="mi">13</span>     <span class="c1">// add an unused int parameter.</span>
</span><span class='line'><span class="mi">14</span>     <span class="c1">//</span>
</span><span class='line'><span class="mi">15</span>     <span class="n">T</span><span class="o">*</span> <span class="n">Pop</span><span class="p">(</span><span class="kt">int</span><span class="p">){</span>
</span><span class='line'><span class="mi">16</span>         <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lock</span><span class="p">(</span><span class="n">m_mutex</span><span class="p">);</span>
</span><span class='line'><span class="mi">17</span>         <span class="nf">if</span><span class="p">(</span><span class="n">m_stack</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class='line'><span class="mi">18</span>             <span class="k">return</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'><span class="mi">19</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">20</span>         <span class="n">T</span><span class="o">*</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">m_stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'><span class="mi">21</span>         <span class="n">m_stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'><span class="mi">22</span>         <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="mi">23</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">24</span>
</span><span class='line'><span class="mi">25</span> <span class="k">private</span><span class="o">:</span>
</span><span class='line'><span class="mi">26</span>     <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*&gt;</span> <span class="n">m_stack</span><span class="p">;</span>
</span><span class='line'><span class="mi">27</span>     <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">m_mutex</span><span class="p">;</span>
</span><span class='line'><span class="mi">28</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lock-Free的：
(垃圾收集相关的代码没贴出来）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'> <span class="mi">1</span> <span class="k">class</span> <span class="nc">LockFreeStack</span><span class="p">{</span>
</span><span class='line'> <span class="mi">2</span> <span class="k">public</span><span class="o">:</span>
</span><span class='line'> <span class="mi">3</span>     <span class="c1">// The elements we wish to store should inherit Node</span>
</span><span class='line'> <span class="mi">4</span>     <span class="c1">//</span>
</span><span class='line'> <span class="mi">5</span>     <span class="k">struct</span> <span class="n">Node</span><span class="p">{</span>
</span><span class='line'> <span class="mi">6</span>         <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'> <span class="mi">7</span>     <span class="p">};</span>
</span><span class='line'> <span class="mi">8</span>
</span><span class='line'> <span class="mi">9</span>     <span class="c1">// Unfortunately, there is no platform independent way to</span>
</span><span class='line'><span class="mi">10</span>     <span class="c1">// define this class.  The following definition works in</span>
</span><span class='line'><span class="mi">11</span>     <span class="c1">// gcc on x86_64 architectures</span>
</span><span class='line'><span class="mi">12</span>     <span class="c1">//</span>
</span><span class='line'><span class="mi">13</span>     <span class="k">class</span> <span class="nc">TaggedPointer</span><span class="p">{</span>
</span><span class='line'><span class="mi">14</span>     <span class="k">public</span><span class="o">:</span>
</span><span class='line'><span class="mi">15</span>         <span class="n">TaggedPointer</span><span class="p">()</span><span class="o">:</span> <span class="n">m_node</span><span class="p">(</span><span class="n">nullptr</span><span class="p">),</span> <span class="n">m_counter</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="mi">16</span>
</span><span class='line'><span class="mi">17</span>         <span class="n">Node</span><span class="o">*</span> <span class="n">GetNode</span><span class="p">(){</span>
</span><span class='line'><span class="mi">18</span>             <span class="k">return</span> <span class="n">m_node</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_acquire</span><span class="p">);</span>
</span><span class='line'><span class="mi">19</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">20</span>
</span><span class='line'><span class="mi">21</span>         <span class="kt">uint64_t</span> <span class="n">GetCounter</span><span class="p">(){</span>
</span><span class='line'><span class="mi">22</span>             <span class="k">return</span> <span class="n">m_counter</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_acquire</span><span class="p">);</span>
</span><span class='line'><span class="mi">23</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">24</span>
</span><span class='line'><span class="mi">25</span>         <span class="kt">bool</span> <span class="n">CompareAndSwap</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">oldNode</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">oldCounter</span><span class="p">,</span> <span class="n">Node</span><span class="o">*</span> <span class="n">newNode</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">newCounter</span><span class="p">){</span>
</span><span class='line'><span class="mi">26</span>             <span class="kt">bool</span> <span class="n">cas_result</span><span class="p">;</span>
</span><span class='line'><span class="mi">27</span>             <span class="n">__asm__</span> <span class="n">__volatile__</span>
</span><span class='line'><span class="mi">28</span>             <span class="p">(</span>
</span><span class='line'><span class="mi">29</span>                 <span class="s">&quot;lock;&quot;</span>           <span class="c1">// This makes the following instruction atomic (it is non-blocking)</span>
</span><span class='line'><span class="mi">30</span>                 <span class="s">&quot;cmpxchg16b %0;&quot;</span>  <span class="c1">// cmpxchg16b sets ZF on success</span>
</span><span class='line'><span class="mi">31</span>                 <span class="s">&quot;setz       %3;&quot;</span>  <span class="c1">// if ZF set, set cas_result to 1</span>
</span><span class='line'><span class="mi">32</span>
</span><span class='line'><span class="mi">33</span>                 <span class="o">:</span> <span class="s">&quot;+m&quot;</span> <span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">),</span> <span class="s">&quot;+a&quot;</span> <span class="p">(</span><span class="n">oldNode</span><span class="p">),</span> <span class="s">&quot;+d&quot;</span> <span class="p">(</span><span class="n">oldCounter</span><span class="p">),</span> <span class="s">&quot;=q&quot;</span> <span class="p">(</span><span class="n">cas_result</span><span class="p">)</span>
</span><span class='line'><span class="mi">34</span>                 <span class="o">:</span> <span class="s">&quot;b&quot;</span> <span class="p">(</span><span class="n">newNode</span><span class="p">),</span> <span class="s">&quot;c&quot;</span> <span class="p">(</span><span class="n">newCounter</span><span class="p">)</span>
</span><span class='line'><span class="mi">35</span>                 <span class="o">:</span> <span class="s">&quot;cc&quot;</span><span class="p">,</span> <span class="s">&quot;memory&quot;</span>
</span><span class='line'><span class="mi">36</span>             <span class="p">);</span>
</span><span class='line'><span class="mi">37</span>             <span class="k">return</span> <span class="n">cas_result</span><span class="p">;</span>
</span><span class='line'><span class="mi">38</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">39</span>     <span class="k">private</span><span class="o">:</span>
</span><span class='line'><span class="mi">40</span>         <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span> <span class="n">m_node</span><span class="p">;</span>
</span><span class='line'><span class="mi">41</span>         <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="kt">uint64_t</span><span class="o">&gt;</span> <span class="n">m_counter</span><span class="p">;</span>
</span><span class='line'><span class="mi">42</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">43</span>     <span class="c1">// 16-byte alignment is required for double-width</span>
</span><span class='line'><span class="mi">44</span>     <span class="c1">// compare and swap</span>
</span><span class='line'><span class="mi">45</span>     <span class="c1">//</span>
</span><span class='line'><span class="mi">46</span>     <span class="n">__attribute__</span><span class="p">((</span><span class="n">aligned</span><span class="p">(</span><span class="mi">16</span><span class="p">)));</span>
</span><span class='line'><span class="mi">47</span>
</span><span class='line'><span class="mi">48</span>     <span class="kt">bool</span> <span class="nf">TryPushStack</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">entry</span><span class="p">){</span>
</span><span class='line'><span class="mi">49</span>         <span class="n">Node</span><span class="o">*</span> <span class="n">oldHead</span><span class="p">;</span>
</span><span class='line'><span class="mi">50</span>         <span class="kt">uint64_t</span> <span class="n">oldCounter</span><span class="p">;</span>
</span><span class='line'><span class="mi">51</span>
</span><span class='line'><span class="mi">52</span>         <span class="n">oldHead</span> <span class="o">=</span> <span class="n">m_head</span><span class="p">.</span><span class="n">GetNode</span><span class="p">();</span>
</span><span class='line'><span class="mi">53</span>         <span class="n">oldCounter</span> <span class="o">=</span> <span class="n">m_head</span><span class="p">.</span><span class="n">GetCounter</span><span class="p">();</span>
</span><span class='line'><span class="mi">54</span>         <span class="n">entry</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="n">oldHead</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">memory_order_relaxed</span><span class="p">);</span>
</span><span class='line'><span class="mi">55</span>         <span class="k">return</span> <span class="n">m_head</span><span class="p">.</span><span class="n">CompareAndSwap</span><span class="p">(</span><span class="n">oldHead</span><span class="p">,</span> <span class="n">oldCounter</span><span class="p">,</span> <span class="n">entry</span><span class="p">,</span> <span class="n">oldCounter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="mi">56</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">57</span>
</span><span class='line'><span class="mi">58</span>     <span class="kt">bool</span> <span class="nf">TryPopStack</span><span class="p">(</span><span class="n">Node</span><span class="o">*&amp;</span> <span class="n">oldHead</span><span class="p">,</span> <span class="kt">int</span> <span class="n">threadId</span><span class="p">){</span>
</span><span class='line'><span class="mi">59</span>         <span class="n">oldHead</span> <span class="o">=</span> <span class="n">m_head</span><span class="p">.</span><span class="n">GetNode</span><span class="p">();</span>
</span><span class='line'><span class="mi">60</span>         <span class="kt">uint64_t</span> <span class="n">oldCounter</span> <span class="o">=</span> <span class="n">m_head</span><span class="p">.</span><span class="n">GetCounter</span><span class="p">();</span>
</span><span class='line'><span class="mi">61</span>         <span class="k">if</span><span class="p">(</span><span class="n">oldHead</span> <span class="o">==</span> <span class="n">nullptr</span><span class="p">){</span>
</span><span class='line'><span class="mi">62</span>             <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="mi">63</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">64</span>         <span class="n">m_hazard</span><span class="p">[</span><span class="n">threadId</span><span class="o">*</span><span class="mi">8</span><span class="p">].</span><span class="n">store</span><span class="p">(</span><span class="n">oldHead</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">memory_order_seq_cst</span><span class="p">);</span>
</span><span class='line'><span class="mi">65</span>         <span class="k">if</span><span class="p">(</span><span class="n">m_head</span><span class="p">.</span><span class="n">GetNode</span><span class="p">()</span> <span class="o">!=</span> <span class="n">oldHead</span><span class="p">){</span>
</span><span class='line'><span class="mi">66</span>             <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="mi">67</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">68</span>         <span class="k">return</span> <span class="n">m_head</span><span class="p">.</span><span class="n">CompareAndSwap</span><span class="p">(</span><span class="n">oldHead</span><span class="p">,</span> <span class="n">oldCounter</span><span class="p">,</span> <span class="n">oldHead</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">memory_order_acquire</span><span class="p">),</span> <span class="n">oldCounter</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="mi">69</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">70</span>
</span><span class='line'><span class="mi">71</span>     <span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="n">Node</span><span class="o">*</span> <span class="n">entry</span><span class="p">){</span>
</span><span class='line'><span class="mi">72</span>         <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span>
</span><span class='line'><span class="mi">73</span>             <span class="k">if</span><span class="p">(</span><span class="n">TryPushStack</span><span class="p">(</span><span class="n">entry</span><span class="p">)){</span>
</span><span class='line'><span class="mi">74</span>                 <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="mi">75</span>             <span class="p">}</span>
</span><span class='line'><span class="mi">76</span>             <span class="n">usleep</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
</span><span class='line'><span class="mi">77</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">78</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">79</span>
</span><span class='line'><span class="mi">80</span>     <span class="n">Node</span><span class="o">*</span> <span class="nf">Pop</span><span class="p">(</span><span class="kt">int</span> <span class="n">threadId</span><span class="p">){</span>
</span><span class='line'><span class="mi">81</span>         <span class="n">Node</span><span class="o">*</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="mi">82</span>         <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span>
</span><span class='line'><span class="mi">83</span>             <span class="k">if</span><span class="p">(</span><span class="n">TryPopStack</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">threadId</span><span class="p">)){</span>
</span><span class='line'><span class="mi">84</span>                 <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="mi">85</span>             <span class="p">}</span>
</span><span class='line'><span class="mi">86</span>             <span class="n">usleep</span><span class="p">(</span><span class="mi">250</span><span class="p">);</span>
</span><span class='line'><span class="mi">87</span>         <span class="p">}</span>
</span><span class='line'><span class="mi">88</span>     <span class="p">}</span>
</span><span class='line'><span class="mi">89</span>
</span><span class='line'><span class="mi">90</span> <span class="k">private</span><span class="o">:</span>
</span><span class='line'><span class="mi">91</span>     <span class="n">TaggedPointer</span> <span class="n">m_head</span><span class="p">;</span>
</span><span class='line'><span class="mi">92</span>     <span class="c1">// Hazard pointers are separated into different cache lines to avoid contention</span>
</span><span class='line'><span class="mi">93</span>     <span class="c1">//</span>
</span><span class='line'><span class="mi">94</span>     <span class="n">boost</span><span class="o">::</span><span class="n">atomic</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">*&gt;</span> <span class="n">m_hazard</span><span class="p">[</span><span class="n">MAX_THREADS</span><span class="o">*</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'><span class="mi">95</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>硬件相关，Windows已提供函数InterlockedCompareExchange<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[读《寻找家园》]]></title>
    <link href="http://towriting.com/blog/2014/07/21/review-xzjy/"/>
    
    <updated>2014-07-21T23:51:23+00:00</updated>
    <id>http://towriting.com/blog/2014/07/21/review-xzjy</id>
    
    <content type="html"><![CDATA[<p>诚然，这是一本文辞优美的自传集。自以为博学杂收，但此前竟从未听说过高尔泰，概和主流媒介打压有关。80后的我，有幸避过了那段岁月，所以对于书中，高先生凄苦的人生，只能报以同情，很难产生共鸣。高先生悲惨的际遇和余华《活着》中的福贵的一生很像，波诡云谲的时代，至亲“莫名其妙”的离去，种种不公平待遇，最后还活着，随波逐流。</p>

<p>但逆水的鱼，这是天生的命运。高先生最终去了标榜自由平等的米国，广阔天地，但难以大有作为，老来无依，故国不堪回首，所以整理出这<a href='http://www.amazon.cn/gp/product/B00K0E4NFO/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00K0E4NFO&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>寻找家园</a>来。</p>

<p>读此书，看高尔泰传奇一生，随便拈来一件小事都是我们当代常人一生难逢的际遇，而且即使选中了你我，也并非你我可以承受。反观我们的生活，钢筋水泥的城市，一成不变的工作，三两个不勾心斗角的同事，做着不着调的工作，两点一线，直至老去，有幸的留下荒冢一堆，无运的骨灰都不是自己的！</p>

<p>都市中渺小的我，搞不清高尔泰追求的自由为何物，自由和活着孰重孰轻。年轻的高尔泰似乎没有追求自由的能力，只能任命运摆弄，想着往上爬的，却成了别人的梯子，80年代后，环境宽松，如果懂的迎合，以他的名望和学识，想必日子不会艰难，也不会老来流落米国。</p>

<p>在我看来，自由是，不妨碍他人的前提下，随意做自己想做的事情。所以活着是自由的前提，“不自由，毋宁死”，死了不还是得不到自由！如果高尔泰可以顺从，是否可以摆脱暴力的关照，安心做自己喜欢的事情呢，这不就实现了他的自由了吗？</p>

<p>这种想法有些小人之心度君子之腹了，高尔泰是不会仰人鼻息的!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[关于重构的一些想法]]></title>
    <link href="http://towriting.com/blog/2014/07/08/evil-refactor/"/>
    
    <updated>2014-07-08T00:26:25+00:00</updated>
    <id>http://towriting.com/blog/2014/07/08/evil-refactor</id>
    
    <content type="html"><![CDATA[<p>很早之前听说过这样一个故事：</p>

<blockquote><p>一个漂亮的女子与马戏团的小丑坠入爱河，并迅速结婚。小丑十分珍惜得来的幸福，努力挣钱，瞒着女子做了整容手术，为了给女子惊喜。整容后的小丑出现在女子眼前时，女子提出离婚，因为他喜欢的是原来长的并不帅的小丑。</p></blockquote>

<p>一个项目重构的动机(目的)无外乎两种：1. 给用户带来更好的体验、2. 项目代码失控（难以维护、添加新特性）。重构必然导致变化，用户接受现在的产品，重构后的版本并不一定喜欢。至于极端，哪怕重构后的版本比老版本好的多，也会有用户高声喊：给我老版本。这和小丑的故事一样了，哪怕整容帅的像郭德纲一样，女子照样甩一甩衣袖走了。</p>

<p>现实生活中的重构往往是程序员自己发起的，Martin Fowler都有一本书起名为《重构》，并被许多程序员奉为圭臬。程序员的初衷是好的，但往往会低估重构的难度，项目越大耦合越多，往往牵一发而动全身，当老板跑过来问你进度时，你只能回以尴尬的笑，因为进度会进入无法掌控的地步。最近自己差点陷入这种进退维谷的境地，还好项目比较小，最后算是挺了过来。</p>

<p>但大的项目移筋动骨的重构就真的很难成功了。记得在核新软件的时候，项目庞大臃肿，添加新功能困难，软件的开发与执行效率都很低。记得一段时间内，大家重构的呼声很高，不过最后不了了之，因为工程浩大、重构后的兼容性、重构后软件多长时间可以稳定、重构后版本的测试等等需要考虑的各种问题已不单单是几个开发可以掌控的了的。而同时产品的需求还是不会减少，因为产品根本不关心软件的技术架构、可靠性、可维护性等等。</p>

<p>产品不关心重构是正常的。确实，一个可以正常运行，用户没有太多投诉、谨慎的编码也不会出太大问题的项目为什么要重构呢？假如某地发现了一个煤矿，第一批人来开采，一年时间采掉了50%的煤; 第二批人来了，煤已不那么好采，必须小心谨慎的对待，因为矿难不断，不过还好花了两年时间采到了30%的煤; 第三批人来了，矿上留下的全是前人留下的坑，无处落脚，须将前面的坑填掉，才能保证采得到煤，先花费了三年填坑，最后又花了一年时间采到了10%的煤。软件开发也一样，软件的生命期有限，是否需要花费人力将软件重构的完美值得商榷，可能重构完成之日，为项目终结之时，留下完美的架构与设计又有何用呢？</p>

<p>既然程序员呼吁重构的理由是，项目代码难以维护，那为什么不从一开始写出易维护的代码？</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Linux下开启TRIM]]></title>
    <link href="http://towriting.com/blog/2014/06/28/archlinux-trim/"/>
    
    <updated>2014-06-28T21:55:12+00:00</updated>
    <id>http://towriting.com/blog/2014/06/28/archlinux-trim</id>
    
    <content type="html"><![CDATA[<p>新买得一块SSD，听说开启TRIM才能更好的发挥SSD的性能，Linux并没有默认开启TRIM，但开启还是比较简单。</p>

<p>首先要检测SSD是否支持TRIM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo hdparm -I /dev/sda <span class="p">|</span> grep <span class="s2">&quot;TRIM supported&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果支持则会出现：&#8221;Data Set Management TRIM supported&#8221;</p>

<p>如果SSD支持TRIM, 则可以开启TRIM了, 这里介绍常用的两种方法。</p>

<h3>方法1：修改<a href="http://en.wikipedia.org/wiki/Fstab">fstab</a>, 添加discard属性</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vim /etc/fstab
</span></code></pre></td></tr></table></div></figure>


<p>下面是我机器上fstab的配置</p>

<blockquote><p>UUID=27dd31b4-8aa4-4043-b921-540a312c056c       /               ext4            rw,relatime,data=ordered,<strong>discard</strong>        0 1</p>

<p>UUID=42f79958-0776-4b2f-8aa3-db827bf257b6       /home           ext4            rw,relatime,data=ordered,<strong>discard</strong>        0 2</p></blockquote>

<h3>方法2：使用fstrim定期执行trim任务</h3>

<p>以我用的archlinux为例，首先安装并运行<a href="http://en.wikipedia.org/wiki/Cron">cron</a>服务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo pacman -S cronie
</span><span class='line'>sudo systemctl start cronie
</span><span class='line'>sudo systemctl <span class="nb">enable </span>cronie
</span></code></pre></td></tr></table></div></figure>


<p>然后创建一个任务配置:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gedit /etc/cron.daily/trim
</span></code></pre></td></tr></table></div></figure>


<p>并将下面的内容拷贝到里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">LOG</span><span class="o">=</span>/var/log/trim.log
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;*** $(date -R) ***&quot;</span> &gt;&gt; <span class="nv">$LOG</span>
</span><span class='line'>fstrim -v / &gt;&gt; <span class="nv">$LOG</span>
</span><span class='line'>fstrim -v /home &gt;&gt; <span class="nv">$LOG</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：</p>

<ol>
<li><p><a href="http://www.webupd8.org/2013/01/enable-trim-on-ssd-solid-state-drives.html">http://www.webupd8.org/2013/01/enable-trim-on-ssd-solid-state-drives.html</a></p></li>
<li><p><a href="https://wiki.archlinux.org/index.php/Solid_State_Drives">https://wiki.archlinux.org/index.php/Solid_State_Drives</a></p></li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Dock项目个人总结]]></title>
    <link href="http://towriting.com/blog/2014/05/03/dock-project-experience/"/>
    
    <updated>2014-05-03T22:55:00+00:00</updated>
    <id>http://towriting.com/blog/2014/05/03/dock-project-experience</id>
    
    <content type="html"><![CDATA[<p>Dock说白了是电脑桌面上常驻的一个工作区，Dock的目的是占领用户的桌面，况且我们追赶的团队和追赶我们的团队都已做出Dock，所以应用宝必须也要做。关于应用宝Dock的具体进度、功能与界面不做介绍，现在从开发的角度讲一讲Dock项目两个月来的一点体会。</p>

<p>自己的角色：负责逻辑部分接口和整体框架的设计，及相关功能开发。</p>

<h3>可圈可点之处：</h3>

<hr />

<p><strong>1. 逻辑与界面完全分离</strong></p>

<p>Dock项目应该是，我们团队第一次在多人协作下，采用了界面与逻辑分离的开发方案。这样的好处是：降低了耦合，使开发简单化（做UI的无需关心逻辑，反之依然）。当然这样做必然会增加一些工作量，尤其是后来界面和逻辑分属不同进程，逻辑的接口必须做IPC转发。</p>

<p>逻辑与界面分离的方案，最重要的是定义好接口。</p>

<p><strong>2. 最小完备接口</strong></p>

<p>最小完备接口是我一贯主张的一种接口风格，因为一旦增加冗余的接口，并被客户端代码使用，那就很难移除了，势必造成接口膨胀。项目期间，主管提出接口要提前考虑、功能要丰富的建议，不过自己还是坚持了自己想法。因为加一个接口容易，去掉一个就难了，好比韩愈曾说的，从善如登、从恶如崩。</p>

<h3>败笔之处</h3>

<hr />

<p><strong>1. 任务分配粗略</strong></p>

<p>需求接下来，四个人开始做，一开始定下两个人做界面另两个做逻辑，但没有细化具体的产品细节、开发难度耗时等，也没有分配具体谁做什么事情，只是口头上大概分了一下。这极易导致任务分配不均和任务遗漏的现象。好的方法应该是，细化任务并明确责任，公诸于众。但团队积习如此，非朝夕可改。</p>

<p><strong>2. 线程的滥用</strong></p>

<p>线程滥用当然指逻辑部分。从进入应用宝团队初期，就发现代码中线程滥用，好似每天不开几个线程吃不下饭一般。所以最初Dock的逻辑代码的主框架考虑到了这点，以使后面添加具体业务时无需创建线程。但后期，需求的演变和功能的要求迫使不得不又增加了几个线程，其实有些线程是非必须的。而这些不必要的线程，往往会滋生一批Bug。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[读《苏东坡传》]]></title>
    <link href="http://towriting.com/blog/2014/04/27/the-gay-genius-review/"/>
    
    <updated>2014-04-27T21:52:00+00:00</updated>
    <id>http://towriting.com/blog/2014/04/27/the-gay-genius-review</id>
    
    <content type="html"><![CDATA[<p>昨天在kindle上读完了<a href='http://www.amazon.cn/gp/product/B00D7X84MS/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00D7X84MS&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>苏东坡传</a>，本以为千年前人物的传记，必简短：年代久远，事迹佚失，有甚可写。谁知此书篇幅不小，断断续续一月才读完，书中夹杂着大量苏东坡的文学作品：诗词和书信等，吾久不读古文，美感失，只好略过。</p>

<p>苏东坡留下了大量的文字，百姓也口口相传着他的轶事，细心严谨的林语堂以此推敲出苏东坡的一生。苏东坡漫长的一生虽坎坷精彩，但也不过如其词云：<strong>大江东去浪淘尽千古风流人物</strong>，读完苏东坡的一生，印象最深的却是如下两个细节：</p>

<h2>&ldquo;太快建立的友情不会长久&rdquo;</h2>

<p>这是苏东坡的妻子王弗在其结交章惇的时候给与他的忠告。当时，苏东坡少年成名，意气风发，想必并不会将这句话放在心里，不久与章惇成为不错的朋友，后来这个朋友让他吃进苦头。历史上章惇到底人品如何，无从得知，不过《苏东坡传》中后来章惇加入“王安石党&#8221;，与苏东坡形同水火，后来章惇得势，打压元祐党人，将苏东坡发配海南，恨不得搞死他。当时他们都年近花甲，想不通为何有如此大的仇怨，何况当时苏东坡丝毫无法威胁到他。</p>

<p>想到这里，突然觉得年轻时的苏东坡可能刺痛过章惇某些敏感的神经。章惇的出身不雅，是个私生子，所以儿时可能受尽奚落，致性格外强内卑。而苏东坡虽性格温婉，但年少轻狂，难免会有些许恃才傲物得罪于人而不自知。凡此种种，最终导致了自己颠沛，起伏的一生。不过人生的不幸，确成就了文坛上的一朵奇葩。</p>

<p>再回头看王弗这就话：太快建立的友情不会长久，是否可以反应她和苏东坡的爱情：太快建立的爱情不会长久。他和苏东坡一见钟情的概率不是很大，因为这桩婚姻是包办的。但一路走来，他们的感情是真挚的，有词为证：</p>

<blockquote><p>十年生死两茫茫。不思量。自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。
夜来幽梦忽还乡。小轩窗。正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。</p></blockquote>

<p>话说这是鄙人高中最喜欢的词。</p>

<h2>人至将死</h2>

<p>另一个给我印象很深的细节是，东坡晚年被贬惠州，想要在住所种植一棵树。他对帮他移植树的人说：树不要太大，太大不容易活；也不要太小，太小自己等不及树长大。读这段时，自己内心戚然，无助感犹然而生。东坡也在很早之前已抒发过此种感慨：</p>

<blockquote><p>寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。</p></blockquote>

<p>须臾的人生，意义何在，聪明如苏东坡都想不通，你我又怎能明了！</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[谁在用C++ STL？]]></title>
    <link href="http://towriting.com/blog/2014/04/18/who-use-stl/"/>
    
    <updated>2014-04-18T23:39:00+00:00</updated>
    <id>http://towriting.com/blog/2014/04/18/who-use-stl</id>
    
    <content type="html"><![CDATA[<p>C++用了四年了，这两天才把<a href='http://www.amazon.cn/gp/product/B00DGLU91K/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00DGLU91K&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>Effective STL</a>看了一遍。此书作为C++经典书系Effective三部曲之一，知名度与所受褒扬远不及另两本，个中缘由是否因为STL地位不济。所以今日以自己鄙陋的经历来谈一谈当前STL在C++程序员中的地位和使用状况。</p>

<p>大家知道STL中三大法宝：容器、迭代器和算法。我所经历的公司/团队STL的使用情况：</p>

<hr />

<table border="1">
<tr><th>序号</th><th>团队规模</th><th>项目规模</th><th>容器</th><th>迭代器</th><th>高级迭代器</th><th>算法</th><th>高级算法</th><th>funtional</th></tr>
<tr><th>1</th><td>5人以下,平均2年经验</td><td>10万以下</td><td>基本没有</td><td>基本没有</td><td>基本没有</td><td>基本没有</td><td>无</td><td>无</td></tr>
<tr><th>2</th><td>10人,平均2年经验</td><td>100万</td><td>较多</td><td>较多</td><td>较少</td><td>较少</td><td>极少</td><td>几无</td></tr>
<tr><th>3</th><td>10人,平均4年经验</td><td>100万</td><td>较多</td><td>较多</td><td>较少</td><td>极少</td><td>较少</td><td>有</td></tr>
</table>


<p>（注：表中迭代器是指通过begin和end获取interator，而高级迭代器指back_inserter等迭代器生成器和内置迭代器;算法指sort,foreach, 高级算法指算法带if的形式）</p>

<hr />

<p><strong>看来，STL并不受大家欢迎，至少在我所呆过的团队里是这样的，为何如此？</strong></p>

<h3>洪水猛兽 （守旧）</h3>

<p>容器（最简单的vector）几乎是大部分C++程序员最开始接触的STL组件，我也不例外。那是10年自己刚毕业那会儿，在一家公司实习，实现一个简单的图像显示和处理的Demo程序。里面图像数据最初是存储在原始的数组（char [])中。那一阵子在狂啃《C++ Primer》，里面提到C++程序员不应该使用这些原生的数组，应该用vector代替，于是自己将程序中的char []替换成了vector<char>。而后发现一些图像算法执行慢了好多，遂请教mentor，mentor是名校的doctor，不编程久已，他并没用过STL，但提出不要用STL，不要追时髦、偷懒，老老实实的写“C”代码就好了。</p>

<p>舔着第一次用STL的伤口，念着mentor的教诲，在这家公司的第一年里自己后来好像就不再关注和使用STL。同期的C++ Programmer共四人，一个工作1年，另两个更久些，那时我们在“不赶时髦”上很团结，大家愉快的使用着VC6，且都不使用STL。</p>

<p>这就是某些老式小型软件公司一些C++程序员对待STL的态度：排斥守旧，其中缘由高校的计算机教育脱不了干系。</p>

<p>当然有个人和特殊业务场景也会排斥STL：<a href="http://www.zhihu.com/question/20201972">为何某些公司不容许使用C++ STL</a>。</p>

<h3>玄之又玄 （畏惧）</h3>

<p>C++本来有有很多不易掌握的细节。而STL同样如此，简单强大，但有微妙的陷阱。就拿Effective STL来说，条款1：慎重的选择容器类型中，就有大量自己不曾掌握模棱两可的点：</p>

<ul>
<li>string的swap会导致迭代器失效</li>
<li>容器的内部可能有引用计数</li>
<li>插入、删除操作的回滚能力</li>
</ul>


<p>当然有些细节无需掌握，但就我接触到的C++程序员大都使用STL的最简单用法: 使用vector和map存储一些数据，而对稍微高级点的STL用法麻木无知或畏惧使用：</p>

<ol>
<li>各种容器的区别，如何使用容器兼容C接口</li>
<li>for_each等函数存在的意义，如何写出函数式风格的代码</li>
<li>类的成员函数和同名全局函数的区别，比如set::find与std::find，map::remove与std::remove等等</li>
<li>xxx_if函数的使用，如何写predicate</li>
<li>function&lt;>, bind函数的使用</li>
<li>一些惯用法，比如erase-remove</li>
</ol>


<p>以上是我认为一个合格的C++开发应掌握的STL技巧。而掌握这些技巧，却是需要一段时间的练习，是否这一原因导致了一部分人对STL的无爱？因为即使不掌握这些技巧，功能是同样可以完成的。</p>

<h3>曲高和寡 （风气)</h3>

<p>语言的出现提高了人们交流的效率，设计模式的出现提高了软件人员的交流效率，但前提是交流的双方都懂才行。STL同样如此，我之蜜糖彼之砒霜，在一个不了解STL的团队中大量使用STL尤其是一些稍微“高级另类”的用法，难免遭人排斥。而且别人很难看懂你写的代码，指责你的代码难于维护，这并不是谁的错，这是一个道不同不幸与某的问题。</p>

<p>在一个不用、不了解STL的团队，喜爱STL之人会克制使用STL！</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[入职一周年记]]></title>
    <link href="http://towriting.com/blog/2014/04/08/tencent-anniversary/"/>
    
    <updated>2014-04-08T23:38:00+00:00</updated>
    <id>http://towriting.com/blog/2014/04/08/tencent-anniversary</id>
    
    <content type="html"><![CDATA[<p>现在是2014年4月8日，23点45分，一刻钟后，今天将永不存在。一个小时前，才离开公司，相信现在公司还有同事在吧。今早收到了系统发来的祝贺入职周年的邮件，这一天真的来了，回头看自己竟然咬牙坚持下来了。</p>

<h3>背靠大树好乘凉？</h3>

<p>首先，腾讯确实是一个很好的平台，能作为腾讯的员工还是值得自豪的。公司很正规，这自不必说，各种软硬件环境也都不错，平时联调程序也有机会接触到一些技术水平不错的程序员，公司也基本可以做到重视个人的价值，能者多劳，多劳多得。但现在的部门，偏居杭州，保留了原创业公司团队“拼命”的作风。一年来团队忙的头昏脑胀，产品却并无喜人起色：产品跟着KPI走、偏离了产品本质；需求繁重、时间仓促；技术债越积越多，软件越跑越慢；感觉当前的团队像陷入沼泽的野兽，用力挣扎无奈越陷越深。</p>

<p>个人在这种环境下，心理肯定是矛盾的。团队中大概现在有三类人：其一是，团队早期的成员，产品像他们自己的孩子，孩子病了，他们很清楚，宁可自己吃苦也要给孩子治病（方法正确与否还在其次）；第二种人是，希望产品能做好，但并不太有信心，能做好本职工作，大部分人是这种人；第三种是<a href="http://baike.baidu.com/view/1561482.htm">坏苹果</a>，尤其现在团队的处境下更会放大其危害性。</p>

<h3>千万不要做坏苹果</h3>

<p>自己是第二种人吧。主观上感觉团队中出现了一些烂苹果的味道，至于究竟其行为能否归为烂苹果就见仁见智了。反正其作为真的不符合自己的工作价值观。极个别人：你跟他讲DRY，他给你四处拷贝代码；你跟他说代码可读性好，他给你疯狂用宏；你指出他的Bug，他缩头不理你；到头来代码没写几行，Bug倒永垂不朽的留下! 郭德纲形容同行的话真是不假：</p>

<blockquote><p>&ldquo;你和他讲文化，他和你讲孔子；你和他讲孔子，他和你讲老子；你和他讲老子，他给你装孙子&#8221;。</p></blockquote>

<p>而整个团队呢？技术氛围几无，遇事推诿，任务分配不合理，凭责任心干活！坏苹果会传染，白沙在涅与之俱黑，真的害怕自己也会变得这样。换个角度看，只是别人的行为规范与己迥异而已，没准自己在他人眼中是奇葩呢。子曰:非礼勿视,非礼勿听,非礼勿言,非礼勿动，践行何其难也。</p>

<p>但团队中还是有好多“良心”人物值得自己学习，不管是从技术、还是豁达、还是专业态度上。导师、正副组长都是自己学习的榜样。</p>

<h3>我们为什么要加班？</h3>

<p>有人将加班视为洪水猛兽，但这些人都是大牛，大牛有选择自己工作环境的自由。对于大部分人中国程序员来说，加班是约定俗成。但加班溯源自哪里真的不好说，可能是早期的软件从业者，是真正的喜欢这个行业，喜欢的时候加班也是甜的，所以他们会下班后继续沉浸在自己喜欢的工作中，所以无形中引领了加班之风。个人不反对加班，但仅限于特定时期、特殊情况下的加班加点，讨厌长期因不合理的项目进度安排导致的加班，而过去的一年真的是这样。</p>

<p><strong>工作量 ÷ 工期 > 8 == 加班</strong></p>

<p>工作量和工期都由产品包办制定，需求时间评估前，deadline早已定死，开发时间评估形同虚设，不是量体裁衣却是削足适履。想起<a href="http://www.ituring.com.cn/article/42974">Mac君</a>讲的故事：</p>

<pre><code>乔布斯兴冲冲的从外面冲进来，对沃兹说，『兄弟，咱们得做个XX，你是最佳人选，只要你能做出来，咱就发达了』

善良的沃兹：『没问题，我喜欢这挑战』~~

『唔，我们需要在4天内完成』

『我艹，你没事吧，怎么可能？至少需要两周』

乔布斯不说话含情脉脉的望着沃兹：『You can do it！』

『好吧，十天』
『……』
『好吧，五天』
『……』

『好吧，就4天』

乔布斯吹着口哨走了，沃兹留下来干了4天4夜。
</code></pre>

<p>故事的结尾是，沃兹漂亮的完成了任务。但天才不世出，现实世界真实的结局可能并不如此。</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[读：人生元编程]]></title>
    <link href="http://towriting.com/blog/2014/02/23/mac-shuo-review/"/>
    
    <updated>2014-02-23T22:52:00+00:00</updated>
    <id>http://towriting.com/blog/2014/02/23/mac-shuo-review</id>
    
    <content type="html"><![CDATA[<p><a href='http://www.amazon.cn/gp/product/B00ID5UV30/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00ID5UV30&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>人生元编程</a>这本书最近很火，所以昨天花了半天的时间在Kindle上翻看了一遍。最近自媒体将网文整理成集出书的很多，这一本也是，作者池建强，自称Mac君。去年就断断续续的跟过Mac君在其<a href="http://macshuo.com/">博客</a>上帖的文章，印象最深的是其能将IT界大佬的故事娓娓道来，颇有吴军之风，更兼Mac君是根正苗红的程序员，所以文章读来倍感亲切，处处体现了其对程序员个体的勉励。</p>

<p>但《人生元编程》书读来的快感并不比直接从Mac君博客上扒拉文章高多少，且大篇幅的Mac技巧、系统配置的内容，有充页数之嫌，直接会被我等俗气的Windows程序员pass。但一本书能找到哪怕一处能启发自己的点足矣，何况此书还是有很多地方还是闪耀着智慧的光泽的：</p>

<ul>
<li>如果你能够把技术文章写好，慢慢就能写出人文类的文字，慢慢你就会发现自己已经站在科技与人文的十字路口了</li>
<li>只有多核或多个CPU才可能发生并行，如果单核单CPU只能发生并发行为</li>
<li>不停的反驳别人不会证明自己的聪明和独立思考，正确的讨论技巧和解决问题才是王道</li>
<li>曾经有位古人说过，如果你手里有一把锤子，所有东西看上去都像钉子。还有一位今人说过，如果你有一个钉子，就会满大街找锤子！</li>
<li>技术岗所受到的待遇普遍是低于相同层级的管理岗位的，</li>
<li>如果我需要别人的意见和建议，那就把自己放空，暂时扔掉偏见和预判，</li>
<li>旅行就是从一个自己待烦了的地方，跑到一个别人待烦了的地方</li>
<li>很多人羡慕创业公司的人获得的财富，他们只不过是把你20年平稳的打工生涯压缩成4年艰苦卓绝的创业</li>
<li>但费力之事自有其好处，人生总要做一些艰难费力的事情，读书也是一样。 写到这儿很多读者要问了，这和</li>
<li>但费力之事自有其好处，人生总要做一些艰难费力的事情</li>
<li>真正强大的Shell是深藏不露的zsh，</li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[春节杂记]]></title>
    <link href="http://towriting.com/blog/2014/02/20/spring/"/>
    
    <updated>2014-02-20T22:00:00+00:00</updated>
    <id>http://towriting.com/blog/2014/02/20/spring</id>
    
    <content type="html"><![CDATA[<p>今天正月二十一，按我们老家旧时的习俗，二月二&#8221;龙抬头&#8221;以后，才算过完年。今年过年在家里待了12天，算来不短，一年的忙碌终换来了多出的几日闲暇。年前被评为优秀员工算是出乎自己意料的一件春节期间的乐事。但在家中的这一小段时光，却没什么值得记录的，在村里依旧是整天玩一种叫做牌九的赌博游戏，自己很乏味，但儿时的伙伴热衷于此，只能舍乐陪他们了。然后其它的无非是，会会旧时朋友同学，一年中平日难得交流，且行业迥异，话题颇少，只能以酒代话，醉醺醺的归家了。</p>

<p>这个春节，和往年一样，主要任务是见一见常年不联系的人们，然后散了，依旧联系很少。今年越发感觉自己和每个人的关系都远了：父母、亲戚、儿时伙伴、高中同学。与父母交流最多的就是母亲总会问我：想吃什么、多吃点等等。至亲叔伯姑姑一大堆，但自己常年在外，甚少联系，感觉越来越不亲了，如今奶奶年事已高，等她走后，想必这些至亲会愈发疏远了，包括儿时躺一个被窝的堂弟，现在每月除了给我要点Q币外，没什么聊的了。儿时伙伴，都没怎么上过大学，大多早已成家，现在有些在家中打工，有些在外面做生意，这些年我在外面，能想像到他们的生活，但他们可能不知道我到底怎么过的，儿时的伙伴，一生的朋友，彼此很亲，但话题也越来越少了。高中同学，大都在外打拼，都很艰辛，不过几个要好的，也会是一辈子的哥们。</p>

<p>兄长回国教书，今年本该回家过年，但却意外上火车几小时前有事无法回来了，加上去年没见面，如果等今年春节再见，就三年了才见一次面了。人生有几个三年。这个影响我少年时期最深的人，和父母一样亲的人，也渐行渐远了。初八回杭，与父母同行至德州，父母去安徽看望哥嫂，这一天下起了大学，自己的高铁晚点三个小时，初九凌晨才到杭州了。然后雨雪不断，直到今天天才放晴了。</p>

<p>感觉整个春节的基调是灰的，唯一的亮点是，自己尝试着购得一<a href='http://www.amazon.cn/gp/product/B00CWPIDHI/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B00CWPIDHI&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>KPW2</a>，并且在春节期间，窝在家里里屋的床上翻看了三本书，自己的阅读习惯应该是被改变了，且是好的改变，这算是一慰藉吧！！</p>

<p>还有一事想起，今年群发短信明显减少，收到的短信也算是“私人定制”的，还意外的收到了苟哥一条酸溜溜的祝福。同事们会在微信群里发红包。当然更要好的同学会通话联系，我远在非洲的高中好友，总会在佳节想起我。</p>
]]></content>
    
  </entry>
  
</feed>