<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 程序人生 | 书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/blog/categories/cheng-xu-ren-sheng/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2014-07-07T23:28:50+00:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dock项目个人总结]]></title>
    <link href="http://towriting.com/blog/2014/05/03/dock-project-experience/"/>
    <updated>2014-05-03T22:55:00+00:00</updated>
    <id>http://towriting.com/blog/2014/05/03/dock-project-experience</id>
    <content type="html"><![CDATA[<p>Dock说白了是电脑桌面上常驻的一个工作区，Dock的目的是占领用户的桌面，况且我们追赶的团队和追赶我们的团队都已做出Dock，所以应用宝必须也要做。关于应用宝Dock的具体进度、功能与界面不做介绍，现在从开发的角度讲一讲Dock项目两个月来的一点体会。</p>

<p>自己的角色：负责逻辑部分接口和整体框架的设计，及相关功能开发。</p>

<h3>可圈可点之处：</h3>

<hr />

<p><strong>1. 逻辑与界面完全分离</strong></p>

<p>Dock项目应该是，我们团队第一次在多人协作下，采用了界面与逻辑分离的开发方案。这样的好处是：降低了耦合，使开发简单化（做UI的无需关心逻辑，反之依然）。当然这样做必然会增加一些工作量，尤其是后来界面和逻辑分属不同进程，逻辑的接口必须做IPC转发。</p>

<p>逻辑与界面分离的方案，最重要的是定义好接口。</p>

<p><strong>2. 最小完备接口</strong></p>

<p>最小完备接口是我一贯主张的一种接口风格，因为一旦增加冗余的接口，并被客户端代码使用，那就很难移除了，势必造成接口膨胀。项目期间，主管提出接口要提前考虑、功能要丰富的建议，不过自己还是坚持了自己想法。因为加一个接口容易，去掉一个就难了，好比韩愈曾说的，从善如登、从恶如崩。</p>

<h3>败笔之处</h3>

<hr />

<p><strong>1. 任务分配粗略</strong></p>

<p>需求接下来，四个人开始做，一开始定下两个人做界面另两个做逻辑，但没有细化具体的产品细节、开发难度耗时等，也没有分配具体谁做什么事情，只是口头上大概分了一下。这极易导致任务分配不均和任务遗漏的现象。好的方法应该是，细化任务并明确责任，公诸于众。但团队积习如此，非朝夕可改。</p>

<p><strong>2. 线程的滥用</strong></p>

<p>线程滥用当然指逻辑部分。从进入应用宝团队初期，就发现代码中线程滥用，好似每天不开几个线程吃不下饭一般。所以最初Dock的逻辑代码的主框架考虑到了这点，以使后面添加具体业务时无需创建线程。但后期，需求的演变和功能的要求迫使不得不又增加了几个线程，其实有些线程是非必须的。而这些不必要的线程，往往会滋生一批Bug。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入职一周年记]]></title>
    <link href="http://towriting.com/blog/2014/04/08/tencent-anniversary/"/>
    <updated>2014-04-08T23:38:00+00:00</updated>
    <id>http://towriting.com/blog/2014/04/08/tencent-anniversary</id>
    <content type="html"><![CDATA[<p>现在是2014年4月8日，23点45分，一刻钟后，今天将永不存在。一个小时前，才离开公司，相信现在公司还有同事在吧。今早收到了系统发来的祝贺入职周年的邮件，这一天真的来了，回头看自己竟然咬牙坚持下来了。</p>

<h3>背靠大树好乘凉？</h3>

<p>首先，腾讯确实是一个很好的平台，能作为腾讯的员工还是值得自豪的。公司很正规，这自不必说，各种软硬件环境也都不错，平时联调程序也有机会接触到一些技术水平不错的程序员，公司也基本可以做到重视个人的价值，能者多劳，多劳多得。但现在的部门，偏居杭州，保留了原创业公司团队“拼命”的作风。一年来团队忙的头昏脑胀，产品却并无喜人起色：产品跟着KPI走、偏离了产品本质；需求繁重、时间仓促；技术债越积越多，软件越跑越慢；感觉当前的团队像陷入沼泽的野兽，用力挣扎无奈越陷越深。</p>

<p>个人在这种环境下，心理肯定是矛盾的。团队中大概现在有三类人：其一是，团队早期的成员，产品像他们自己的孩子，孩子病了，他们很清楚，宁可自己吃苦也要给孩子治病（方法正确与否还在其次）；第二种人是，希望产品能做好，但并不太有信心，能做好本职工作，大部分人是这种人；第三种是<a href="http://baike.baidu.com/view/1561482.htm">坏苹果</a>，尤其现在团队的处境下更会放大其危害性。</p>

<h3>千万不要做坏苹果</h3>

<p>自己是第二种人吧。主观上感觉团队中出现了一些烂苹果的味道，至于究竟其行为能否归为烂苹果就见仁见智了。反正其作为真的不符合自己的工作价值观。极个别人：你跟他讲DRY，他给你四处拷贝代码；你跟他说代码可读性好，他给你疯狂用宏；你指出他的Bug，他缩头不理你；到头来代码没写几行，Bug倒永垂不朽的留下! 郭德纲形容同行的话真是不假：</p>

<blockquote><p>&ldquo;你和他讲文化，他和你讲孔子；你和他讲孔子，他和你讲老子；你和他讲老子，他给你装孙子"。</p></blockquote>

<p>而整个团队呢？技术氛围几无，遇事推诿，任务分配不合理，凭责任心干活！坏苹果会传染，白沙在涅与之俱黑，真的害怕自己也会变得这样。换个角度看，只是别人的行为规范与己迥异而已，没准自己在他人眼中是奇葩呢。子曰:非礼勿视,非礼勿听,非礼勿言,非礼勿动，践行何其难也。</p>

<p>但团队中还是有好多“良心”人物值得自己学习，不管是从技术、还是豁达、还是专业态度上。导师、正副组长都是自己学习的榜样。</p>

<h3>我们为什么要加班？</h3>

<p>有人将加班视为洪水猛兽，但这些人都是大牛，大牛有选择自己工作环境的自由。对于大部分人中国程序员来说，加班是约定俗成。但加班溯源自哪里真的不好说，可能是早期的软件从业者，是真正的喜欢这个行业，喜欢的时候加班也是甜的，所以他们会下班后继续沉浸在自己喜欢的工作中，所以无形中引领了加班之风。个人不反对加班，但仅限于特定时期、特殊情况下的加班加点，讨厌长期因不合理的项目进度安排导致的加班，而过去的一年真的是这样。</p>

<p><strong>工作量 ÷ 工期 > 8 == 加班</strong></p>

<p>工作量和工期都由产品包办制定，需求时间评估前，deadline早已定死，开发时间评估形同虚设，不是量体裁衣却是削足适履。想起<a href="http://www.ituring.com.cn/article/42974">Mac君</a>讲的故事：</p>

<pre><code>乔布斯兴冲冲的从外面冲进来，对沃兹说，『兄弟，咱们得做个XX，你是最佳人选，只要你能做出来，咱就发达了』

善良的沃兹：『没问题，我喜欢这挑战』~~

『唔，我们需要在4天内完成』

『我艹，你没事吧，怎么可能？至少需要两周』

乔布斯不说话含情脉脉的望着沃兹：『You can do it！』

『好吧，十天』
『……』
『好吧，五天』
『……』

『好吧，就4天』

乔布斯吹着口哨走了，沃兹留下来干了4天4夜。
</code></pre>

<p>故事的结尾是，沃兹漂亮的完成了任务。但天才不世出，现实世界真实的结局可能并不如此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我为什么从同花顺离职]]></title>
    <link href="http://towriting.com/blog/2013/12/16/why-i-quit-ths-job/"/>
    <updated>2013-12-16T23:42:00+00:00</updated>
    <id>http://towriting.com/blog/2013/12/16/why-i-quit-ths-job</id>
    <content type="html"><![CDATA[<p>  最近知乎上很流行的一个问题是<a href="http://www.zhihu.com/topic/19909711">为什么从 X 离职</a>，倒退一年快到自己决定离职的日子了，趁热闹，也说说自己为什么离职。</p>

<p>  首先，照例发自肺腑的感谢一下同花顺，同花顺的日子是我C++进步最快的一段时间，在这里我接触到了正规的开发流程，并且遇到了一个很棒的团队，那时的日子每天都很开心。</p>

<hr />

<p>  切入正题，我为什么离开同花顺：</p>

<h3>待遇认知的分歧</h3>

<p>　员工离职的理由千万条，但薪水待遇肯定是大部分人选择离开的最重要的原因，不过大部分人不肯承认罢了。离职的导火索就是公司的年终奖，入职Offer上明确写明是3-6个月，可实际发到手的一月左右。我表明了自己的不满，公司领导以程序员不是钟点工，薪水是靠产品的收益决定的来“开导”我。这种观点不错，但是却是站在创业者的角度看的。自己作为一个打工者，站在打工者的角度上讲，程序员的待遇在市场经济条件下，是由供求关系决定的，并上下浮动于程序员个体的能力和工作产出。何况公司远没到揭不开锅的程度，你可以不按约定给我应有的Money，但不能忽悠我。</p>

<h3>人为什么要工作？</h3>

<p>　马斯洛总结了人的<a href="http://en.wikipedia.org/wiki/Maslow's_hierarchy_of_needs">五种需求</a>。</p>

<p>　刚毕业时囊空如洗，一头扎进工作中，完全是为了实现人的第一种需求-生理（存）需求。自己前两年的工作确实是为了实现生存需求，但当工作两三年，衣食无虞，现在仍然工作的原因好像是上一阶段的惯性。有些人可能为了实现“昂贵”的生理需求（车房等）而工作一辈子，但对我而言这种动力不足以使我能持续激情的工作。</p>

<p>　顺着马斯洛的需求金子塔往上看，塔顶是自我实现的需求，这是人的最高级的需求。</p>

<p>　是否可以提高自己的能力，是我衡量一份工作是否适合自己的重要指标。以前从没有在内心中将自我能力的提高作为工作的一个直接原因，觉得能力提高（自我实现需求）不过是为了能挣更多钱（生理需求），觉得后者才是工作的直接原因。看来我错了，自我能力的提高属于自我实现的需求，完全是促使我们工作的高级原因。而可贵的是，高级的需求好像兼容低级的需求，就是你在实现了自我实现的需求后，生理需求自然可以满足了。并且生理需求容易满足，自我实现需求难以满足，而自我实现的满足可以给人带来持久且真正的满足。在我看来，工作中的自我实现包括两点：自我能力提高和我（们）创造了有价值的东西。</p>

<p>  而同花顺，据观察感知是无法满足我这两种需求的，尤其第二种，我的判断是错误的吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你们是勤劳还是懒惰的程序员？]]></title>
    <link href="http://towriting.com/blog/2013/12/15/are-your-programmers-working-hard-or-are-they-lazy/"/>
    <updated>2013-12-15T17:17:00+00:00</updated>
    <id>http://towriting.com/blog/2013/12/15/are-your-programmers-working-hard-or-are-they-lazy</id>
    <content type="html"><![CDATA[<p><img class="pull-right" src="/images/posts/working-hard/work-smart-not-hard.jpg">
当人们从事体力劳动时，很容易判断他们的努力程度。你可以看到肢体运动和汗水。并且可以看到他们的劳动成果：高楼拔地，稻谷归仓&hellip;。承认和褒奖辛勤的劳作是人的一种本能，是体力运动迷人的一个原因。然而当管理创造性技术员工时，褒扬辛勤劳作的本能就有问题了。高效的员工有时候看起来并没有非常努力的工作。</p>

<p>时光回到2004年，那时我在一家有线电视公司的收费和服务开通系统项目部做初级工程师。这个系统很大，像所有大系统一样，它由一些小的独立的组件构成，每个组件由一些人或小的团队开发。模拟和数字开通系统是几乎毫无关联的系统，由不同的团队分别开发。</p>

<p>模拟电视组计划基于Microsoft Biztalk的一个早期版本开发他们的系统。由我们四名员工和一个微软的团队来开发这个系统和进行生产运行。他们看起来都工作的很辛苦。经常听说他们在晚上和周末加班。一旦出现任何运行故障，每个人都必须放下手头的工作，围在一个人的桌子前，讨论并提出解决意见。正如我们看到的，他们的队伍凝成了一条绳，并且每个成员都非常的努力。</p>

<p>而数字电视组的风貌则截然不同了。初期所有的代码几乎都是一个叫做Dave的家伙写的，我作为初级程序员主要负责一些维护工作。最初我对这些代码很费解，明明一个函数可以搞定的事情，却用好多只有几行代码的类来实现，一些同事也抱怨Dave把事情搞复杂了。但Dave建议我读一些面向对象的书籍，并给我讲解设计模式、<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID原则</a>、单元测试。于是这些代码在我脑中生动起来，深入看过这些代码之后，不得不赞叹其设计的优雅：改变一些代码非常简单，实现新功能根本没什么难的，有单元测试意味着甚少有BUG。</p>

<p>结果是我们看起来工作的很随意。每天下午五点半回家，周末从不加班，从来不会挤在一个人的桌子边胡乱猜测系统的哪个部分出问题了。外人肯定以为我们接到的工作要比模拟电视团队的轻松许多。事实上是，需求差不多，我们只是有更好的设计和单元测试等的基础支撑。</p>

<p>加薪时，公司宣布以表现作为评定的标准。轮到我和老板对话时，老板讲到给那些辛勤工作的人加更多的薪水是很公平的，我们的团队并不以公司事情为己任，比不上那些牺牲了自己晚上和周末时间的英雄们。</p>

<p>公司应该做个实验，观察对比良好设计和团队表现这两个因素的效果。大部分组织是不会做这个对比的。很难判断一个挥洒汗水、废寝忘食、日夜待命的人是否有胜任复杂系统开发的能力。也很难说朝九晚五，上班淘宝的家伙是高质量代码的编程好手，还是仅仅分配到简单的任务？但常人看到的只是第一种人努力工作，而第二种没有。勤快是好的，懒惰就是坏的吗？</p>

<p>我必须说困苦工作是失败的前兆。软件开发在压力、中断的环境中不会进行的很好。工作很长时间不是个好主意。有时解决一个难题的方法是停止想它，出去溜一圈，甚至睡一大觉让潜意识去解决掉它。我最喜欢的一本书是20世纪著名的数学家哈代写的<a href='http://www.amazon.cn/gp/product/B0011F7ORK/ref=as_li_tf_tl?ie=UTF8&camp=536&creative=3200&creativeASIN=B0011F7ORK&linkCode=as2&tag=bringmeluck-23' rel='external nofollow' target='_blank'>一个数学家的辩白</a>。书中提到哈代自己的作息是这样的：早上四个小时的工作然后下午看板球。他提到超过四个小时的连续脑力工作是徒劳和无意义的。</p>

<p>我想对管理者说，要以结果以可以工作的软件来衡量人，而不是以人工作时的辛苦程度。你应该衡量员工的产出，而不是坐在他们旁边观察他们不自在的操作着IDE，抑或是围在一块儿相互“帮助”。</p>

<p>由Towriting.com翻译自：<a href="http://mikehadlow.blogspot.com/2013/12/are-your-programmers-working-hard-or.html">Code rant: Are Your Programmers Working Hard, Or Are They Lazy?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整洁代码之上]]></title>
    <link href="http://towriting.com/blog/2013/12/03/beyond-clean-code/"/>
    <updated>2013-12-03T23:09:00+00:00</updated>
    <id>http://towriting.com/blog/2013/12/03/beyond-clean-code</id>
    <content type="html"><![CDATA[<h2>什么是整洁代码（What Is Clean Code）</h2>

<p>当你拿这个问题问不同的人，或采用不同的语气，你可能会得到不同的答案。但通常无外乎这些评判标准：</p>

<ul>
<li>自解释的命名</li>
<li>一致的代码风格</li>
<li>合适的抽象</li>
<li>可读性良好</li>
<li>清晰的代码流程</li>
<li>良好的架构</li>
<li>复杂任务使用库实现</li>
<li>使用工业级的解决方案</li>
<li>没有安全漏洞</li>
<li>函数短小</li>
<li>函数复杂度小</li>
</ul>


<p>不一而足，当然你也有自己评判整洁代码的标尺&hellip;</p>

<h2>如何写出整洁的代码(How To Write Clean Code)</h2>

<p>这是经久不衰的热议话题。我认为下面这幅画可以精辟地诠释如何写出整洁的代码：</p>

<p><img src="/images/posts/beyond-clean-code/towriting.png" title="" ></p>

<p>当然这有一点无厘头，但这是真的。大部分程序员没有写出整洁代码的时间。就此我们无可奈何！</p>

<h2>切换视角（Change The Premise)</h2>

<p>我打算在这说点可能稍具争议、离经叛道的想法：</p>

<blockquote><p>这里只有两种代码。一种具有商业价值，另一种没有！</p></blockquote>

<p>在工业界，我们看中的是“漂亮”的代码，我们看好的是可读性好、行为正确的代码。但因为某些原因，我们从来没有谈论过代码必须要有商用价值。再整洁的代码没有商业价值也是“贱货”。</p>

<p>所以，我们把“具有商业价值”整合进整洁代码的评判标尺，我们得到四种代码：</p>

<table border="1">
<tr><th></th><th>良好的商业价值</th><th>贫乏的商业价值</th></tr>
<tr><th>整洁代码</th><td>出色的代码</td><td>坏代码</td></tr>
<tr><th>丑陋代码</th><td>良好的代码</td><td>垃圾代码</td></tr>
</table>


<p>很明显使代码具有商业价值比使其“整洁”更划算。专注于“整洁”最多可以得到“坏代码”，而专注于"商业价值"，则最差得到“良好的代码”..</p>

<p>所以，怎样才能专注于商业价值呢？</p>

<h2>DIRTI方法（The DIRTI Method)</h2>

<p>我靠写DIRTI<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的代码来使代码专注于商业价值:</p>

<ol>
<li><strong>Develop</strong> &ndash; 为解决某个（商业）问题而快速开发（Develop)出哪怕很烂的代码。不要担心代码格式、抽象及其他任何问题。就是要完成它。</li>
<li><strong>Isolate</strong> &ndash; 分离（Isolate)上一步实现的功能，整理出抽象模块。这些将成为重构的点。</li>
<li><strong>Refactor</strong> &ndash; 重构(Refactor)这些模块，开始整理代码。</li>
<li><strong>Test</strong> &ndash; 当这些模块整理合理后，开始写测试(Test)用例（单元测试）。</li>
<li><strong>Integrate</strong> &ndash; 一旦这些模块通过测试就可以把它们集成(Integrate)进你的程序（要有集成测试）。</li>
</ol>


<p>妙的是，这一系列步骤假定你开始的时候并不知你的代码抽象的样子。但你一旦你开始写代码，它会逐渐帮助你明白你要解决的问题（方案）。</p>

<p>与TDD（测试驱动开发）截然不同的是，TDD期望你在你开始动手写代码前明白你要写的代码。</p>

<p>这确实会把我们带到一个美妙的境地。使用DIRTI方法会有两个主要的阶段：不停的DIR和不停的RTI。</p>

<p>当你最终明白方案之前，你将一遍遍的开发，分离，重构。而一旦顿悟以后，你将花费更多的时间到下一阶段（重构，测试，集成）。</p>

<h2>为什么这有效（Why This Works)</h2>

<p>为什么我坐在这里给你讲DIRTI方法？因为它行之有效。DIRTI方法确实会帮助你知道你要写的代码。它会帮助你指出要解决的问题。</p>

<p>更重要的是，它为你能做出英明决断提供力量和武器。你一定记得，具有商业价值的代码是好的代码。所以当你离开开发阶段，你的代码已经具有了商业价值，因为它已经可以解决最初要解决的问题。</p>

<p>整个进程是迭代的。你可以不停的分离、重构、分离、重构，直到你对代码满意。但这个过程中，你是在可以工作的代码上进行的。这非常酷！这样允许你责问自己，”是否代码已经足够好了“。一旦你对代码满意了，就进入下一阶段。</p>

<p>这会让你关注于最重要的东西：商业价值，而代码质量上的关注度是可以动态选择的。</p>

<h2>不是方案，仅仅是工具（Not A Solution, A Tool)</h2>

<p>必须要澄清的是：不是要你替换掉TDD、结对编程或其它你已经采用了的方法。DIRTI只会是你工具箱里的又一件工具。针对不同的问题要采用不同的工具：</p>

<p>如果你明白你要写的东西，那就用TDD。如果你仅仅知道问题，而不知解决方案（最佳），那就用DIRTI吧。</p>

<p>===================================================================================</p>

<p>翻译自：<a href="http://blog.ircmaxell.com/2013/11/beyond-clean-code.html">Beyond Clean Code</a></p>

<p>图片来自：<a href="http://www.aqee.net/how-to-write-good-code/">如何写出好代码</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>发音同Dirty<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
