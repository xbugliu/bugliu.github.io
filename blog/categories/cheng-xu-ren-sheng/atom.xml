<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 程序人生 | 书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/blog/categories/cheng-xu-ren-sheng/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2019-08-30T18:12:51+08:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[互联网公司“24小时待命”的陋习]]></title>
    <link href="http://towriting.com/blog/2014/08/31/24-hour-stand-by/"/>
    <updated>2014-08-31T19:47:45+08:00</updated>
    <id>http://towriting.com/blog/2014/08/31/24-hour-stand-by</id>
    <content type="html"><![CDATA[<p>24小时待命可能有些夸张，但它确实是以一种不成文的规定存在于一部分互联网公司。记得去年培训时，来自深圳总部的培训老师，自豪的说TX许多部门里员工都是24小时待命，随时应对解决问题。听一些其它公司的朋友讲，他们也有非上班时间被叫回公司的现象。所以24小时待命在一些地方可能形成了习俗。习俗很可怕，哪怕明知是错误的人们也无力反抗，比如裹脚。</p>

<h3>有时真的需要24小时待命</h3>

<p>在一些<code>小而美</code>的团队，早期面对众多的对手，必须有快速的执行力，才可以抢占先机，可以说24小时待命是小团队早期阶段不会死掉的必备条件。</p>

<p>还有一种情况下，相关人员必须随叫随到，就是线上产品出现了严重问题，这是必须要立即处理的，出现了这种问题，相信大家每个人都会很着急，会主动赶回去的。这主要涉及运维和相关开发。</p>

<h3>头痛医脚的昏招</h3>

<p>但除了这两种情况，我看不出这种随意拉员工到公司的习惯有什么好处，相反会极大的侵害员工的积极性。如果在一个非创业期的团队经常出现周末随意拉员工回去加班的情况，那一定是<strong>产品和项目管理出现了严重问题</strong>。拉员工回去对于解决问题，治标不治本，相反还让人产生反感，让人有种疲于奔命之感。</p>

<p>除此之外还有一种情况容易滋生24小时待命文化:老板的淫威。这是我熟识的一个朋友身上发生的事，他经常在坐了一个小时公交快到家门口的时候，被老板叫回去开临时会议，而且一开就到半夜12点了。后来朋友离开了那家公司，想必他不愿意再过那种随叫随到的生活，毕竟家里还有娇妻幼子。</p>

<p>我现在也有些反感，周六早上被拉进微信群讨论产品问题，为什么不周五讨论？如果是紧急问题，我会立马回去处理的，但往往事情并不是那么紧急，往往是因为老板的不经意一句话，产品人员热情的跟进了，于是我们开发人员就到了公司加班。</p>

<h3>陋习的危害</h3>

<p>对于这种24小时待命的习俗，是没有人敢于站出来反对的，因为稍有质疑就会被扣上<code>不积极</code>、<code>没有责任心</code>的帽子，以后在公司就别想混了。所以对于这种东西，大家往往<strong>道路以目</strong>。长久下去，必会影响公司的发展，挫败团队的斗志。</p>

<p>仔细想一下，24小时待命和<code>不积极</code>、<code>没有责任心</code>责任心并没有必然关系，岗位不同，责任不同，就我们开发而言，责任心应该体现在按时保质的完成开发任务（协助处理一些突发事故）。QA的主要责任感是按时完成测试，如果一个团队推行24小时待命，那什么东西是非得半夜过来测的？</p>

<p>相反我觉得员工对"24小时待命"文化的逆来顺受是一种逃避和不负责任的做法。没人去深层次的分析和解决产生临时拉人加班的原因，只会使团队滑向更深的深渊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于重构的一些想法]]></title>
    <link href="http://towriting.com/blog/2014/07/08/evil-refactor/"/>
    <updated>2014-07-08T08:26:25+08:00</updated>
    <id>http://towriting.com/blog/2014/07/08/evil-refactor</id>
    <content type="html"><![CDATA[<p>很早之前听说过这样一个故事：</p>

<blockquote><p>一个漂亮的女子与马戏团的小丑坠入爱河，并迅速结婚。小丑十分珍惜得来的幸福，努力挣钱，瞒着女子做了整容手术，为了给女子惊喜。整容后的小丑出现在女子眼前时，女子提出离婚，因为他喜欢的是原来长的并不帅的小丑。</p></blockquote>

<p>一个项目重构的动机(目的)无外乎两种：1. 给用户带来更好的体验、2. 项目代码失控（难以维护、添加新特性）。重构必然导致变化，用户接受现在的产品，重构后的版本并不一定喜欢。至于极端，哪怕重构后的版本比老版本好的多，也会有用户高声喊：给我老版本。这和小丑的故事一样了，哪怕整容帅的像郭德纲一样，女子照样甩一甩衣袖走了。</p>

<p>现实生活中的重构往往是程序员自己发起的，Martin Fowler都有一本书起名为《重构》，并被许多程序员奉为圭臬。程序员的初衷是好的，但往往会低估重构的难度，项目越大耦合越多，往往牵一发而动全身，当老板跑过来问你进度时，你只能回以尴尬的笑，因为进度会进入无法掌控的地步。最近自己差点陷入这种进退维谷的境地，还好项目比较小，最后算是挺了过来。</p>

<p>但大的项目移筋动骨的重构就真的很难成功了。记得在核新软件的时候，项目庞大臃肿，添加新功能困难，软件的开发与执行效率都很低。记得一段时间内，大家重构的呼声很高，不过最后不了了之，因为工程浩大、重构后的兼容性、重构后软件多长时间可以稳定、重构后版本的测试等等需要考虑的各种问题已不单单是几个开发可以掌控的了的。而同时产品的需求还是不会减少，因为产品根本不关心软件的技术架构、可靠性、可维护性等等。</p>

<p>产品不关心重构是正常的。确实，一个可以正常运行，用户没有太多投诉、谨慎的编码也不会出太大问题的项目为什么要重构呢？假如某地发现了一个煤矿，第一批人来开采，一年时间采掉了50%的煤; 第二批人来了，煤已不那么好采，必须小心谨慎的对待，因为矿难不断，不过还好花了两年时间采到了30%的煤; 第三批人来了，矿上留下的全是前人留下的坑，无处落脚，须将前面的坑填掉，才能保证采得到煤，先花费了三年填坑，最后又花了一年时间采到了10%的煤。软件开发也一样，软件的生命期有限，是否需要花费人力将软件重构的完美值得商榷，可能重构完成之日，为项目终结之时，留下完美的架构与设计又有何用呢？</p>

<p>既然程序员呼吁重构的理由是，项目代码难以维护，那为什么不从一开始写出易维护的代码？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dock项目个人总结]]></title>
    <link href="http://towriting.com/blog/2014/05/03/dock-project-experience/"/>
    <updated>2014-05-03T22:55:00+08:00</updated>
    <id>http://towriting.com/blog/2014/05/03/dock-project-experience</id>
    <content type="html"><![CDATA[<p>Dock说白了是电脑桌面上常驻的一个工作区，Dock的目的是占领用户的桌面，况且我们追赶的团队和追赶我们的团队都已做出Dock，所以应用宝必须也要做。关于应用宝Dock的具体进度、功能与界面不做介绍，现在从开发的角度讲一讲Dock项目两个月来的一点体会。</p>

<p>自己的角色：负责逻辑部分接口和整体框架的设计，及相关功能开发。</p>

<h3>可圈可点之处：</h3>

<hr />

<p><strong>1. 逻辑与界面完全分离</strong></p>

<p>Dock项目应该是，我们团队第一次在多人协作下，采用了界面与逻辑分离的开发方案。这样的好处是：降低了耦合，使开发简单化（做UI的无需关心逻辑，反之依然）。当然这样做必然会增加一些工作量，尤其是后来界面和逻辑分属不同进程，逻辑的接口必须做IPC转发。</p>

<p>逻辑与界面分离的方案，最重要的是定义好接口。</p>

<p><strong>2. 最小完备接口</strong></p>

<p>最小完备接口是我一贯主张的一种接口风格，因为一旦增加冗余的接口，并被客户端代码使用，那就很难移除了，势必造成接口膨胀。项目期间，主管提出接口要提前考虑、功能要丰富的建议，不过自己还是坚持了自己想法。因为加一个接口容易，去掉一个就难了，好比韩愈曾说的，从善如登、从恶如崩。</p>

<h3>败笔之处</h3>

<hr />

<p><strong>1. 任务分配粗略</strong></p>

<p>需求接下来，四个人开始做，一开始定下两个人做界面另两个做逻辑，但没有细化具体的产品细节、开发难度耗时等，也没有分配具体谁做什么事情，只是口头上大概分了一下。这极易导致任务分配不均和任务遗漏的现象。好的方法应该是，细化任务并明确责任，公诸于众。但团队积习如此，非朝夕可改。</p>

<p><strong>2. 线程的滥用</strong></p>

<p>线程滥用当然指逻辑部分。从进入应用宝团队初期，就发现代码中线程滥用，好似每天不开几个线程吃不下饭一般。所以最初Dock的逻辑代码的主框架考虑到了这点，以使后面添加具体业务时无需创建线程。但后期，需求的演变和功能的要求迫使不得不又增加了几个线程，其实有些线程是非必须的。而这些不必要的线程，往往会滋生一批Bug。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入职一周年记]]></title>
    <link href="http://towriting.com/blog/2014/04/08/tencent-anniversary/"/>
    <updated>2014-04-08T23:38:00+08:00</updated>
    <id>http://towriting.com/blog/2014/04/08/tencent-anniversary</id>
    <content type="html"><![CDATA[<p>现在是2014年4月8日，23点45分，一刻钟后，今天将永不存在。一个小时前，才离开公司，相信现在公司还有同事在吧。今早收到了系统发来的祝贺入职周年的邮件，这一天真的来了，回头看自己竟然咬牙坚持下来了。</p>

<h3>背靠大树好乘凉？</h3>

<p>首先，腾讯确实是一个很好的平台，能作为腾讯的员工还是值得自豪的。公司很正规，这自不必说，各种软硬件环境也都不错，平时联调程序也有机会接触到一些技术水平不错的程序员，公司也基本可以做到重视个人的价值，能者多劳，多劳多得。但现在的部门，偏居杭州，保留了原创业公司团队“拼命”的作风。一年来团队忙的头昏脑胀，产品却并无喜人起色：产品跟着KPI走、偏离了产品本质；需求繁重、时间仓促；技术债越积越多，软件越跑越慢；感觉当前的团队像陷入沼泽的野兽，用力挣扎无奈越陷越深。</p>

<p>个人在这种环境下，心理肯定是矛盾的。团队中大概现在有三类人：其一是，团队早期的成员，产品像他们自己的孩子，孩子病了，他们很清楚，宁可自己吃苦也要给孩子治病（方法正确与否还在其次）；第二种人是，希望产品能做好，但并不太有信心，能做好本职工作，大部分人是这种人；第三种是<a href="http://baike.baidu.com/view/1561482.htm">坏苹果</a>，尤其现在团队的处境下更会放大其危害性。</p>

<h3>千万不要做坏苹果</h3>

<p>自己是第二种人吧。主观上感觉团队中出现了一些烂苹果的味道，至于究竟其行为能否归为烂苹果就见仁见智了。反正其作为真的不符合自己的工作价值观。极个别人：你跟他讲DRY，他给你四处拷贝代码；你跟他说代码可读性好，他给你疯狂用宏；你指出他的Bug，他缩头不理你；到头来代码没写几行，Bug倒永垂不朽的留下! 郭德纲形容同行的话真是不假：</p>

<blockquote><p>&ldquo;你和他讲文化，他和你讲孔子；你和他讲孔子，他和你讲老子；你和他讲老子，他给你装孙子"。</p></blockquote>

<p>而整个团队呢？技术氛围几无，遇事推诿，任务分配不合理，凭责任心干活！坏苹果会传染，白沙在涅与之俱黑，真的害怕自己也会变得这样。换个角度看，只是别人的行为规范与己迥异而已，没准自己在他人眼中是奇葩呢。子曰:非礼勿视,非礼勿听,非礼勿言,非礼勿动，践行何其难也。</p>

<p>但团队中还是有好多“良心”人物值得自己学习，不管是从技术、还是豁达、还是专业态度上。导师、正副组长都是自己学习的榜样。</p>

<h3>我们为什么要加班？</h3>

<p>有人将加班视为洪水猛兽，但这些人都是大牛，大牛有选择自己工作环境的自由。对于大部分人中国程序员来说，加班是约定俗成。但加班溯源自哪里真的不好说，可能是早期的软件从业者，是真正的喜欢这个行业，喜欢的时候加班也是甜的，所以他们会下班后继续沉浸在自己喜欢的工作中，所以无形中引领了加班之风。个人不反对加班，但仅限于特定时期、特殊情况下的加班加点，讨厌长期因不合理的项目进度安排导致的加班，而过去的一年真的是这样。</p>

<p><strong>工作量 ÷ 工期 > 8 == 加班</strong></p>

<p>工作量和工期都由产品包办制定，需求时间评估前，deadline早已定死，开发时间评估形同虚设，不是量体裁衣却是削足适履。想起<a href="http://www.ituring.com.cn/article/42974">Mac君</a>讲的故事：</p>

<pre><code>乔布斯兴冲冲的从外面冲进来，对沃兹说，『兄弟，咱们得做个XX，你是最佳人选，只要你能做出来，咱就发达了』

善良的沃兹：『没问题，我喜欢这挑战』~~

『唔，我们需要在4天内完成』

『我艹，你没事吧，怎么可能？至少需要两周』

乔布斯不说话含情脉脉的望着沃兹：『You can do it！』

『好吧，十天』
『……』
『好吧，五天』
『……』

『好吧，就4天』

乔布斯吹着口哨走了，沃兹留下来干了4天4夜。
</code></pre>

<p>故事的结尾是，沃兹漂亮的完成了任务。但天才不世出，现实世界真实的结局可能并不如此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我为什么从同花顺离职]]></title>
    <link href="http://towriting.com/blog/2013/12/16/why-i-quit-ths-job/"/>
    <updated>2013-12-16T23:42:00+08:00</updated>
    <id>http://towriting.com/blog/2013/12/16/why-i-quit-ths-job</id>
    <content type="html"><![CDATA[<p>  最近知乎上很流行的一个问题是<a href="http://www.zhihu.com/topic/19909711">为什么从 X 离职</a>，倒退一年快到自己决定离职的日子了，趁热闹，也说说自己为什么离职。</p>

<p>  首先，照例发自肺腑的感谢一下同花顺，同花顺的日子是我C++进步最快的一段时间，在这里我接触到了正规的开发流程，并且遇到了一个很棒的团队，那时的日子每天都很开心。</p>

<hr />

<p>  切入正题，我为什么离开同花顺：</p>

<h3>待遇认知的分歧</h3>

<p>　员工离职的理由千万条，但薪水待遇肯定是大部分人选择离开的最重要的原因，不过大部分人不肯承认罢了。离职的导火索就是公司的年终奖，入职Offer上明确写明是3-6个月，可实际发到手的一月左右。我表明了自己的不满，公司领导以程序员不是钟点工，薪水是靠产品的收益决定的来“开导”我。这种观点不错，但是却是站在创业者的角度看的。自己作为一个打工者，站在打工者的角度上讲，程序员的待遇在市场经济条件下，是由供求关系决定的，并上下浮动于程序员个体的能力和工作产出。何况公司远没到揭不开锅的程度，你可以不按约定给我应有的Money，但不能忽悠我。</p>

<h3>人为什么要工作？</h3>

<p>　马斯洛总结了人的<a href="http://en.wikipedia.org/wiki/Maslow's_hierarchy_of_needs">五种需求</a>。</p>

<p>　刚毕业时囊空如洗，一头扎进工作中，完全是为了实现人的第一种需求-生理（存）需求。自己前两年的工作确实是为了实现生存需求，但当工作两三年，衣食无虞，现在仍然工作的原因好像是上一阶段的惯性。有些人可能为了实现“昂贵”的生理需求（车房等）而工作一辈子，但对我而言这种动力不足以使我能持续激情的工作。</p>

<p>　顺着马斯洛的需求金子塔往上看，塔顶是自我实现的需求，这是人的最高级的需求。</p>

<p>　是否可以提高自己的能力，是我衡量一份工作是否适合自己的重要指标。以前从没有在内心中将自我能力的提高作为工作的一个直接原因，觉得能力提高（自我实现需求）不过是为了能挣更多钱（生理需求），觉得后者才是工作的直接原因。看来我错了，自我能力的提高属于自我实现的需求，完全是促使我们工作的高级原因。而可贵的是，高级的需求好像兼容低级的需求，就是你在实现了自我实现的需求后，生理需求自然可以满足了。并且生理需求容易满足，自我实现需求难以满足，而自我实现的满足可以给人带来持久且真正的满足。在我看来，工作中的自我实现包括两点：自我能力提高和我（们）创造了有价值的东西。</p>

<p>  而同花顺，据观察感知是无法满足我这两种需求的，尤其第二种，我的判断是错误的吗？</p>

<h5>分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;2014年8月2日&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h5>

<p>时隔半年发现自己上面说的东西有些空洞，现在我的<a href="http://weibo.com/wpcockroach">老领导</a>也早已离开同花顺，并在之乎专门回答了：<a href="http://www.zhihu.com/question/22086638">你为什么离开同花顺</a>。事到如今，一年半时间，原同花顺行情客户端开发组，一波十几个老同事，都差不多走光了。这种情况，公司自身肯定是有问题的，每个走的人肯定也都有自己的小九九。</p>

<p>就我来说，本不想再说同花顺的坏话，毕竟在这里认识了好多好哥们，而且不想给别人留下自己落井下石的形象，但如果是事实，为什么不说呢？</p>

<p>其实，离开同花顺最主要的原因是同花顺作坊式的管理让人看不到希望、没有尊严。如果是其他原因不可能所有人都想跑掉，要知道有些人找的新工作某些方面并不比同花顺好，但依然义无反顾的走了，因为新的环境会让人更有尊严一些。</p>
]]></content>
  </entry>
  
</feed>
