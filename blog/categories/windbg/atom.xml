<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: windbg | 书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/blog/categories/windbg/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2019-03-16T20:39:40+08:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windbg定位内存泄露的一种简单方法]]></title>
    <link href="http://towriting.com/blog/2014/11/23/windbg-memory-leak/"/>
    <updated>2014-11-23T04:51:47+08:00</updated>
    <id>http://towriting.com/blog/2014/11/23/windbg-memory-leak</id>
    <content type="html"><![CDATA[<p>前两天接到一个反映进程内存占用过G的投诉。问题是必現的，一定是内存泄露，应该容易定位，一同事远程看过现场，使用gflags和windbg试图找到泄露的堆栈，同事是一步步按照<a href="http://www.codeproject.com/Articles/31382/Memory-Leak-Detection-Using-Windbg">这篇文章的方法</a>来的，但在最后一步Windbg没有找到出问题的堆栈，用户给我们远程的时间很短，无法深究gflags+windbg不灵验的原因，只得另辟蹊径。</p>

<h2>步骤如下：</h2>

<h3>0. 安装windbg, 设置symbols, 用windbg attach到发生内存泄露的进程</h3>

<h3>1. 打印出heap的使用情况</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0:003&gt; !heap -s
</span><span class='line'>LFH Key : 0x7ce97b7b
</span><span class='line'>LFH Key : 0x7ce97b7b
</span><span class='line'>Termination on corruption : ENABLED
</span><span class='line'>Heap     Flags    Reserv Commit  Virt   Free   List    UCR    Virt  Lock Fast&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;              <span class="o">(</span>k<span class="o">)</span>    <span class="o">(</span>k<span class="o">)</span>     <span class="o">(</span>k<span class="o">)</span>    <span class="o">(</span>k<span class="o">)</span>    length  blocks cont. heap
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;002c0000 00000002 1024    372     1024   54    13      1      0     0    LFH
</span><span class='line'>00010000 00008000 64      4       64 2   1     1       0      0&lt;br/&gt;
</span><span class='line'>00020000 00008000 64      64      64     62    1       1      0     0
</span><span class='line'>004d0000 00001002 1088    152     1088   7     4       2      0     0    LFH
</span><span class='line'>007c0000 00001002 1088    188     1088   18    7       2      0     0    LFH
</span><span class='line'>00880000 00001002 1280    276     1280   14    5       2      0     0    LFH
</span><span class='line'>01db0000 00001002 64      12      64     2     3       1      0     0
</span><span class='line'>021f0000 00001002 15488   12024   15488  144   7       5      0     0    LFH
</span><span class='line'>00810000 00001002 64      12      64     2     3       1      0     0
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>很明显这一行：<strong>021f0000 00001002 15488   12024   15488  144   7       5      0     0    LFH</strong>是有异常的。</p>

<h3>2. 显示异常heap的信息</h3>

<p><code>
0:003&gt; !heap -stat -h 021f0000
heap @ 021f0000
heap @ 021f0000
group-by: TOTSIZE max-display: 20
  size   #blocks  total  ( %) (percent of total busy bytes)
  a45c   11d   -  b6fa6c (99.75)
  75a8   1     -  75a8   (0.25)
  20     1     -  20     (0.00)
</code></p>

<p>上面11d块size为a45c的内存极有可能是泄露的内存。</p>

<h3>3. 根据泄露内存的Size找到CallStack</h3>

<p>```
0:003> bp ntdll!RtlAllocateHeap &ldquo;j(poi(@esp+c) = 0x0a45c) &lsquo;k&rsquo;;&lsquo;gc&rsquo;&rdquo;
0:003> g
0:003> g
Unable to deliver callback, Unable to deliver callback, 3131</p>

<p>ChildEBPChildEBP RetAddrRetAddr</p>

<p>0021de54 1000ba7e 0021de54 1000ba7e ntdll!RtlAllocateHeapntdll!RtlAllocateHeap</p>

<p>WARNING: Stack unwind information not available. Following frames may be wrong.
WARNING: Stack unwind information not available. Following frames may be wrong.
0021de6c 1000bbcc 0021de6c 1000bbcc mfnspstd32mfnspstd32++0xba7e0xba7e</p>

<p>0021de8c 1000beb1 0021de8c 1000beb1 mfnspstd32mfnspstd32++0xbbcc0xbbcc</p>

<p>0021deb8 1000ea4d 0021deb8 1000ea4d mfnspstd32mfnspstd32++0xbeb10xbeb1</p>

<p>0021dee4 75de9986 0021dee4 75de9986 mfnspstd32!WSPStartupmfnspstd32!WSPStartup++0x9d0x9d</p>

<p>0021e3b8 75de975b 0021e3b8 75de975b WS2_32!DPROVIDER::InitializeWS2_32!DPROVIDER::Initialize++0x1850x185</p>

<p>0021e3d8 75df5a2f 0021e3d8 75df5a2f WS2_32!DCATALOG::LoadProviderWS2_32!DCATALOG::LoadProvider++0x6d0x6d</p>

<p>0021e678 75df5fe8 0021e678 75df5fe8 WS2_32!DCATALOG::FindIFSProviderForSocketWS2_32!DCATALOG::FindIFSProviderForSocket++0x630x63</p>

<p>0021e68c 75de4204 0021e68c 75de4204 WS2_32!DSOCKET::FindIFSSocketWS2_32!DSOCKET::FindIFSSocket++0x370x37</p>

<p>0021e6cc 00d48444 0021e6cc 00d48444 WS2_32!setsockoptWS2_32!setsockopt++0xb00xb0</p>

<p>0021e6ec 00d4900c 0021e6ec 00d4900c t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x7c140x7c14</p>

<p>0021e71c 00d3e50c 0021e71c 00d3e50c t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x87dc0x87dc</p>

<p>0021e738 00d4a654 0021e738 00d4a654 t**b++0x4e50c0x4e50c</p>

<p>0021e768 00d44f79 0021e768 00d44f79 t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x9e240x9e24</p>

<p>0021f8c8 00d4a6a4 0021f8c8 00d4a6a4 t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x47490x4749</p>

<p>0021f8d8 00cfb1f7 0021f8d8 00cfb1f7 t**b!OPENSSL_Applinktadb!OPENSSL_Applink++0x9e740x9e74</p>

<p>0021f91c 7700ee1c 0021f91c 7700ee1c t**b++0xb1f70xb1f7</p>

<p>0021f928 7731377b 0021f928 7731377b kernel32!BaseThreadInitThunkkernel32!BaseThreadInitThunk++0xe0xe</p>

<p>0021f968 7731374e 0021f968 7731374e ntdll!<strong>RtlUserThreadStartntdll!</strong>RtlUserThreadStart++0x700x70</p>

<p>0021f980 00000000 0021f980 00000000 ntdll!<em>RtlUserThreadStartntdll!</em>RtlUserThreadStart++0x1b0x1b
```</p>

<h3>4. 最后甄别CallStack是否真正的发生内存泄露</h3>

<h2>总结</h2>

<p>此方法适宜，泄露亦重现，且泄露的size固定的情况</p>
]]></content>
  </entry>
  
</feed>
