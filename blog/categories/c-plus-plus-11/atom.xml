<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++11 | 书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/blog/categories/c-plus-plus-11/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2013-08-04T23:11:47+08:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11系列：什么是C++11]]></title>
    <link href="http://towriting.com/blog/2013/08/01/what-is-cpp11/"/>
    <updated>2013-08-01T20:32:00+08:00</updated>
    <id>http://towriting.com/blog/2013/08/01/what-is-cpp11</id>
    <content type="html"><![CDATA[<h2>什么是C++0x?</h2>

<p>C++0x是C++最新标准标准化过程中的曾用名，在这一系列文章中我们将介绍最新标准添加的一系列新的语言特性。在2011年9月份，C++0x正式由官方发布并命名C++11，现在很多编译器已经支持了部分C++11特性。</p>

<p>C++11包括大量的新特性：主要特征像<a href="http://en.cppreference.com/w/cpp/language/lambda">lambda</a>表达式和移动语义，实用的类型推导关键字auto，更简单的容器遍历方法，和大量使模板更容易使用的改进。这一系列教程将包含所以以上特性。</p>

<h2>你该关注C++11吗？</h2>

<p>很明显，C++11为C++带来了大量的新特性。C++11将修复大量缺陷和降低代码拖沓，比如lambda表达式的支持将使代码更简洁。像移动语义这种特性会提高语言内核的基础效率，使你可以写出更快的代码。对模板系统的优化可以使你更容易写出泛型的代码。</p>

<p>新的标准库同时也会包含新的特性，包括对多线程的支持和优化智能指针，后者将给那些还没用类似于<a href="http://www.boost.org/doc/libs/1_46_1/libs/smart_ptr/shared_ptr.htm">boost::shared_ptr</a>的人提供更简单的内存管理方法。</p>

<p>我已经开始使用新的C++11特性，并且非常喜欢：新的auto关键字，对模板">>&ldquo;写法的支持，lambda表达式和新的函数定义语法。</p>

<h2>C++11是如何开发出来的？</h2>

<p>C++11的出现，首先要感谢C++标准委员会的辛勤工作，一群来自学术界和工业界的专家，他们的多次会晤攻克难题，终于设计出了一种跨平台，被多种编译器支持，可以生成高效易维护代码的语言。而C++11新标准，就像对灵活强大的C++的一次不可思议的扩展。</p>

<h2>C++11包括什么？</h2>

<h4>更易用的语言</h4>

<p>使用过C++11后，我发现它提供了大量的基础方法使C++变成了一种更易使用的语言。这不是说它变成了简单的语言&mdash;这里有大量的新特性&mdash;提供了大量的方法使编程更容易。让我们看一个例子，auto关键字。在C++11中，假如编译器可以从变量的初始化中得到它的类型，那么你不必要指定类型。比如，你可以这样写：
<code>cpp
int x = 3;
auto y = x;
</code>
编译器可以推导出y的类型是int。当然，这不是一个证明auto有用的一个闪亮的例子。当使用模板特别是STL时auto很好用。为什么这么说，想象使用一个迭代器(iterator):
<code>cpp
map&lt;string, string&gt; address_book;
address_book["Alex"] = "webmaster@towriting.com";
//add a bunch of people to address_book
</code>
现在你想遍历address_book中的元素，要这样做，你需要一个迭代器：
<code>cpp
map&lt;string, string&gt;::iterator iter = address_book.begin();
</code>
这是一个恐怖的长类型声明，当你已经知道这个类型的时候。这样是不是简洁多了：
<code>cpp
auto iter = address_book.begin();
</code>
代码变得更简单明了，我觉得可读性也更高了，因为模板语法使这一行其它内容变模糊了。这是我特别喜欢的一个特性，我发现它消除了许多头疼和难以追踪的编译错误，节省了时间而没有丢掉表达式的意思。</p>

<h4>区间迭代（range-based for loop)</h4>

<p>下面迭代器的例子是C++11提供的一种处理迭代的更好方法，有些人叫做区间迭代（基本上所有的现代语言都支持）。这个例子足够证明这种语法是多么优雅：
```cpp
vector<int> vec;
vec.push_back(10);
vec.push_back(20);</p>

<p>for (int &amp;i: vec)
{</p>

<pre><code>cout&lt;&lt;i;
</code></pre>

<p>}
<code>
你需要做的就是给出一个变量和要迭代的区间。但是如果你想迭代一个map怎么办？你怎么设置map中值的类型？你知道vector值的类型是int。但map的值类型是pair，通过.first和.second给你提供键和值。但是用auto，你根本无需关心确切类型，你可以简单的写成：
</code>cpp
for (auto address_entry: address_book)
{</p>

<pre><code>cout&lt;&lt;address_entry.first&lt;&lt;" "&lt;address_entry.second&lt;&lt;endl;
</code></pre>

<p>}
<code>
这将打印出：
</code>bash
Alex <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#119;&#x65;&#x62;&#x6d;&#x61;&#115;&#x74;&#101;&#x72;&#x40;&#116;&#x6f;&#x77;&#x72;&#105;&#116;&#x69;&#x6e;&#103;&#x2e;&#99;&#111;&#109;">&#x77;&#x65;&#x62;&#109;&#x61;&#x73;&#116;&#x65;&#x72;&#64;&#116;&#111;&#x77;&#114;&#x69;&#x74;&#105;&#110;&#x67;&#x2e;&#x63;&#111;&#x6d;</a>
```
这是一个不错的C++11新特性组合用法吧？</p>

<h4>>>(right angle brackets)</h4>

<p>我这里还有更易用的优化&mdash;在以前的C++标准中，假如你写一个含有其他模板类型的模板：
<code>cpp
vector&lt;vector&lt;int&gt; &gt; vector_of_int_vectors;
</code>
你必须在结束的两个'>&lsquo;之间添加空格。这不仅烦人，而且当你写成>>而没有空格时，你将得到困惑和误导的编译错误信息。产生这种行为的原因是C++词法分析的最大匹配原则（<a href="http://en.wikipedia.org/wiki/Maximal_munch">maximal munch rule</a>)。一个好消息是从今往后，你再也不用担心了：
<code>cpp
vector&lt;vector&lt;int&gt;&gt; vector_of_int_vectors;
</code>
对，这确实是个小东西，不过却是人工代码克服机器工具的胜利。另外，这样写就不那么丑了。</p>

<h4>多线程</h4>

<p>这是第一次，C++11将包含一种内存模型和对应的多线程库，这意味着你将可以编写符合标准的多线程代码。新标准将提供所有的通用线程方法，比如线程、线程局部存储和原子操作。它也提供了一系列有趣的特性：futures和promises。futures和promises的主要思想是，你可以编写代码表示，“这个对象，一个future代码还没计算完的结果"，它将可以在后台计算结果。当这个值需要的时候，你向future发请求，假如这个值准备好了，那就可以得到它，要不然继续等待。</p>

<p>我将在后续的文章中深入探讨多线程。</p>

<h4>还有好多其他的东西</h4>

<p>C++11特性的数量是客观的。你可以阅读维基百科里的<a href="http://en.wikipedia.org/wiki/C%2B%2B0x">C++11</a>页面，而我计划在这一系列文章中深入探索这些特性，包括：</p>

<ul>
<li>如何用auto、decltype和新的函数语法编写更好的代码</li>
<li>Lambda表达式</li>
<li>区间迭代</li>
<li>静态表达式</li>
<li>右值引用和移动语义</li>
<li>nullptr和强类型的枚举</li>
</ul>


<h3>C++11的编译器支持</h3>

<p>当然，如果无法使用再好的语言特性又有什么用，好消息是大量的编译器已经开始支持C++11。Apache基金会整理了一个列表，列出了C++11的语言特性和编译器的支持情况：<a href="http://wiki.apache.org/stdcxx/C%2B%2B0xCompilerSupport">支持C++11的编译器</a>。假如你对GCC感兴趣，这里有<a href="http://gcc.gnu.org/gcc-4.7/cxx0x_status.html">GCC4.7支持C++11</a>。</p>

<p>有些编译器，比如GCC，不会默认支持这些新特性&mdash;例如，为了支持C++11特性，编译时必须指定 -std=c++0x。当然这也是很有用的，你可以在你的项目中选择编译器和语言集。</p>

<p>下一篇：如何用auto、decltype和新的函数语法编写更好的代码</p>

<p>译者：<a href="http://toWriting.com">toWriting.com</a>；翻译自：<a href="http://www.cprogramming.com/c++11/what-is-c++0x.html">What is C++0x? &ndash; Cprogramming.com</a></p>
]]></content>
  </entry>
  
</feed>
