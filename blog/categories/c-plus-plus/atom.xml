<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | 书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2013-08-03T23:23:02+08:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11系列：什么是C++11]]></title>
    <link href="http://towriting.com/blog/2013/08/01/what-is-cpp11/"/>
    <updated>2013-08-01T20:32:00+08:00</updated>
    <id>http://towriting.com/blog/2013/08/01/what-is-cpp11</id>
    <content type="html"><![CDATA[<h2>什么是C++0x?</h2>

<p>C++0x是C++最新标准标准化过程中的曾用名，在这一系列文章中我们将介绍最新标准添加的一系列新的语言特性。在2011年9月份，C++0x正式由官方发布并命名C++11，现在很多编译器已经支持了部分C++11特性。</p>

<p>C++11包括大量的新特性：主要特征像<a href="http://en.cppreference.com/w/cpp/language/lambda">lambda</a>表达式和移动语义，实用的类型推导关键字auto，更简单的容器遍历方法，和大量使模板更容易使用的改进。这一系列教程将包含所以以上特性。</p>

<h2>你该关注C++11吗？</h2>

<p>很明显，C++11为C++带来了大量的新特性。C++11将修复大量缺陷和降低代码拖沓，比如lambda表达式的支持将使代码更简洁。像移动语义这种特性会提高语言内核的基础效率，使你可以写出更快的代码。对模板系统的优化可以使你更容易写出泛型的代码。</p>

<p>新的标准库同时也会包含新的特性，包括对多线程的支持和优化智能指针，后者将给那些还没用类似于<a href="http://www.boost.org/doc/libs/1_46_1/libs/smart_ptr/shared_ptr.htm">boost::shared_ptr</a>的人提供更简单的内存管理方法。</p>

<p>我已经开始使用新的C++11特性，并且非常喜欢：新的auto关键字，对模板">>&ldquo;写法的支持，lambda表达式和新的函数定义语法。</p>

<h2>C++11是如何开发出来的？</h2>

<p>C++11的出现，首先要感谢C++标准委员会的辛勤工作，一群来自学术界和工业界的专家，他们的多次会晤攻克难题，终于设计出了一种跨平台，被多种编译器支持，可以生成高效易维护代码的语言。而C++11新标准，就像对灵活强大的C++的一次不可思议的扩展。</p>

<h2>C++11包括什么？</h2>

<h4>更易用的语言</h4>

<p>使用过C++11后，我发现它提供了大量的基础方法使C++变成了一种更易使用的语言。这不是说它变成了简单的语言&mdash;这里有大量的新特性&mdash;提供了大量的方法使编程更容易。让我们看一个例子，auto关键字。在C++11中，假如编译器可以从变量的初始化中得到它的类型，那么你不必要指定类型。比如，你可以这样写：
<code>cpp
int x = 3;
auto y = x;
</code>
编译器可以推导出y的类型是int。当然，这不是一个证明auto有用的一个闪亮的例子。当使用模板特别是STL时auto很好用。为什么这么说，想象使用一个迭代器(iterator):
<code>cpp
map&lt;string, string&gt; address_book;
address_book["Alex"] = "webmaster@towriting.com";
//add a bunch of people to address_book
</code>
现在你想遍历address_book中的元素，要这样做，你需要一个迭代器：
<code>cpp
map&lt;string, string&gt;::iterator iter = address_book.begin();
</code>
这是一个恐怖的长类型声明，当你已经知道这个类型的时候。这样是不是简洁多了：
<code>cpp
auto iter = address_book.begin();
</code>
代码变得更简单明了，我觉得可读性也更高了，因为模板语法使这一行其它内容变模糊了。这是我特别喜欢的一个特性，我发现它消除了许多头疼和难以追踪的编译错误，节省了时间而没有丢掉表达式的意思。</p>

<h4>区间迭代（range-based for loop)</h4>

<p>下面迭代器的例子是C++11提供的一种处理迭代的更好方法，有些人叫做区间迭代（基本上所有的现代语言都支持）。这个例子足够证明这种语法是多么优雅：
```cpp
vector<int> vec;
vec.push_back(10);
vec.push_back(20);</p>

<p>for (int &amp;i: vec)
{</p>

<pre><code>cout&lt;&lt;i;
</code></pre>

<p>}
<code>
你需要做的就是给出一个变量和要迭代的区间。但是如果你想迭代一个map怎么办？你怎么设置map中值的类型？你知道vector值的类型是int。但map的值类型是pair，通过.first和.second给你提供键和值。但是用auto，你根本无需关心确切类型，你可以简单的写成：
</code>cpp
for (auto address_entry: address_book)
{</p>

<pre><code>cout&lt;&lt;address_entry.first&lt;&lt;" "&lt;address_entry.second&lt;&lt;endl;
</code></pre>

<p>}
<code>
这将打印出：
</code>bash
Alex <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x77;&#101;&#x62;&#109;&#97;&#115;&#x74;&#101;&#114;&#x40;&#x74;&#111;&#x77;&#x72;&#105;&#116;&#x69;&#110;&#103;&#46;&#99;&#111;&#x6d;">&#119;&#x65;&#x62;&#109;&#97;&#x73;&#116;&#x65;&#x72;&#64;&#x74;&#x6f;&#119;&#x72;&#105;&#116;&#x69;&#x6e;&#x67;&#x2e;&#99;&#111;&#109;</a>
```
这是一个不错的C++11新特性组合用法吧？</p>

<h4>>>(right angle brackets)</h4>

<p>我这里还有更易用的优化&mdash;在以前的C++标准中，假如你写一个含有其他模板类型的模板：
<code>cpp
vector&lt;vector&lt;int&gt; &gt; vector_of_int_vectors;
</code>
你必须在结束的两个'>&lsquo;之间添加空格。这不仅烦人，而且当你写成>>而没有空格时，你将得到困惑和误导的编译错误信息。产生这种行为的原因是C++词法分析的最大匹配原则（<a href="http://en.wikipedia.org/wiki/Maximal_munch">maximal munch rule</a>)。一个好消息是从今往后，你再也不用担心了：
<code>cpp
vector&lt;vector&lt;int&gt;&gt; vector_of_int_vectors;
</code>
对，这确实是个小东西，不过却是人工代码克服机器工具的胜利。另外，这样写就不那么丑了。</p>

<h4>多线程</h4>

<p>这是第一次，C++11将包含一种内存模型和对应的多线程库，这意味着你将可以编写符合标准的多线程代码。新标准将提供所有的通用线程方法，比如线程、线程局部存储和原子操作。它也提供了一系列有趣的特性：futures和promises。futures和promises的主要思想是，你可以编写代码表示，“这个对象，一个future代码还没计算完的结果"，它将可以在后台计算结果。当这个值需要的时候，你向future发请求，假如这个值准备好了，那就可以得到它，要不然继续等待。</p>

<p>我将在后续的文章中深入探讨多线程。</p>

<h4>还有好多其他的东西</h4>

<p>C++11特性的数量是客观的。你可以阅读维基百科里的<a href="http://en.wikipedia.org/wiki/C%2B%2B0x">C++11</a>页面，而我计划在这一系列文章中深入探索这些特性，包括：</p>

<ul>
<li>如何用auto、decltype和新的函数语法编写更好的代码</li>
<li>Lambda表达式</li>
<li>区间迭代</li>
<li>静态表达式</li>
<li>右值引用和移动语义</li>
<li>nullptr和强类型的枚举</li>
</ul>


<h3>C++11的编译器支持</h3>

<p>当然，如果无法使用再好的语言特性又有什么用，好消息是大量的编译器已经开始支持C++11。Apache基金会整理了一个列表，列出了C++11的语言特性和编译器的支持情况：<a href="http://wiki.apache.org/stdcxx/C%2B%2B0xCompilerSupport">支持C++11的编译器</a>。假如你对GCC感兴趣，这里有<a href="http://gcc.gnu.org/gcc-4.7/cxx0x_status.html">GCC4.7支持C++11</a>。</p>

<p>有些编译器，比如GCC，不会默认支持这些新特性&mdash;例如，为了支持C++11特性，编译时必须指定 -std=c++0x。当然这也是很有用的，你可以在你的项目中选择编译器和语言集。</p>

<p>下一篇：如何用auto、decltype和新的函数语法编写更好的代码</p>

<p>译者：<a href="http://toWriting.com">toWriting.com</a>；翻译自：<a href="http://www.cprogramming.com/c++11/what-is-c++0x.html">What is C++0x? &ndash; Cprogramming.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[降权启动进程]]></title>
    <link href="http://towriting.com/blog/2013/07/31/de-elevate-start-process/"/>
    <updated>2013-07-31T22:01:00+08:00</updated>
    <id>http://towriting.com/blog/2013/07/31/de-elevate-start-process</id>
    <content type="html"><![CDATA[<p>Win7下有些进程需要以管理员权限启动，比如安装程序。但又需要这个具有管理员权限的进程启动一个非管理员权限的进程。要实现这一点，方法很简单，首先得到受限的Token，然后由这个Token调用<a href="http://msdn.microsoft.com/en-us/library/ms682429.aspx">CreateProcessAsUser</a>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>代码：WIN7/VS2010 (de_elevate_start_process.cpp)</span> <a href='/downloads/code/cpp/de_elevate_start_process.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;stdafx.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;Windows.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;UserEnv.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;WinBase.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;WinSafer.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma comment(lib, &quot;Userenv.lib&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取不含管理员权限的Token</span>
</span><span class='line'><span class="n">HANDLE</span> <span class="n">CreateNormalUserToken</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">SAFER_LEVEL_HANDLE</span> <span class="n">hLevel</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">SaferCreateLevel</span><span class="p">(</span><span class="n">SAFER_SCOPEID_USER</span><span class="p">,</span> <span class="n">SAFER_LEVELID_NORMALUSER</span><span class="p">,</span> <span class="n">SAFER_LEVEL_OPEN</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hLevel</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">HANDLE</span> <span class="n">hRestrictedToken</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">SaferComputeTokenFromLevel</span><span class="p">(</span><span class="n">hLevel</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hRestrictedToken</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">hRestrictedToken</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="n">SaferCloseLevel</span><span class="p">(</span><span class="n">hLevel</span><span class="p">);</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">hRestrictedToken</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 从管理员进程，创建非管理员进程</span>
</span><span class='line'><span class="n">BOOL</span> <span class="n">DeElevateStartProcess</span><span class="p">(</span><span class="n">TCHAR</span><span class="o">*</span> <span class="n">cmd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">HANDLE</span> <span class="n">hRestToken</span> <span class="o">=</span> <span class="n">CreateNormalUserToken</span><span class="p">();</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">hRestToken</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">DWORD</span> <span class="n">dwCreationFlags</span> <span class="o">=</span> <span class="n">NORMAL_PRIORITY_CLASS</span> <span class="o">|</span> <span class="n">CREATE_NEW_CONSOLE</span><span class="p">;</span>
</span><span class='line'>	<span class="n">LPVOID</span> <span class="n">pEnv</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span><span class="p">(</span><span class="n">CreateEnvironmentBlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pEnv</span><span class="p">,</span> <span class="n">hRestToken</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">))</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">dwCreationFlags</span> <span class="o">|=</span> <span class="n">CREATE_UNICODE_ENVIRONMENT</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">else</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">pEnv</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">PROCESS_INFORMATION</span> <span class="n">pi</span><span class="p">;</span>
</span><span class='line'>	<span class="n">STARTUPINFO</span> <span class="n">si</span><span class="p">;</span>	
</span><span class='line'>	<span class="n">ZeroMemory</span><span class="p">(</span><span class="o">&amp;</span><span class="n">si</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">STARTUPINFO</span><span class="p">));</span>
</span><span class='line'>	<span class="n">si</span><span class="p">.</span><span class="n">cb</span><span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">STARTUPINFO</span><span class="p">);</span>
</span><span class='line'>	<span class="n">si</span><span class="p">.</span><span class="n">lpDesktop</span> <span class="o">=</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;winsta0</span><span class="se">\\</span><span class="s">default&quot;</span><span class="p">);</span> <span class="c1">//default input desktop for the interactive window station</span>
</span><span class='line'>	<span class="n">ZeroMemory</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pi</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">pi</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">const</span> <span class="n">BOOL</span> <span class="n">bResult</span> <span class="o">=</span> <span class="n">CreateProcessAsUser</span><span class="p">(</span><span class="n">hRestToken</span><span class="p">,</span>    <span class="c1">// client&#39;s access token</span>
</span><span class='line'>						<span class="nb">NULL</span><span class="p">,</span>                   <span class="c1">// file to execute</span>
</span><span class='line'>						<span class="n">cmd</span><span class="p">,</span>      <span class="c1">// command line</span>
</span><span class='line'>						<span class="nb">NULL</span><span class="p">,</span>                   <span class="c1">// pointer to process SECURITY_ATTRIBUTES</span>
</span><span class='line'>						<span class="nb">NULL</span><span class="p">,</span>                   <span class="c1">// pointer to thread SECURITY_ATTRIBUTES</span>
</span><span class='line'>						<span class="n">FALSE</span><span class="p">,</span>                  <span class="c1">// handles are not inheritable</span>
</span><span class='line'>						<span class="n">dwCreationFlags</span><span class="p">,</span>        <span class="c1">// creation flags</span>
</span><span class='line'>						<span class="n">pEnv</span><span class="p">,</span>                   <span class="c1">// pointer to new environment block</span>
</span><span class='line'>						<span class="nb">NULL</span><span class="p">,</span>                   <span class="c1">// name of current directory</span>
</span><span class='line'>						<span class="o">&amp;</span><span class="n">si</span><span class="p">,</span>                    <span class="c1">// pointer to STARTUPINFO structure</span>
</span><span class='line'>						<span class="o">&amp;</span><span class="n">pi</span>                     <span class="c1">// receives information about new process</span>
</span><span class='line'>						<span class="p">);</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">bResult</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hProcess</span><span class="p">);</span>
</span><span class='line'>		<span class="n">CloseHandle</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="n">hThread</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">pEnv</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">DestroyEnvironmentBlock</span><span class="p">(</span><span class="n">pEnv</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="n">CloseHandle</span><span class="p">(</span><span class="n">hRestToken</span><span class="p">);</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">bResult</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">TCHAR</span> <span class="n">cmd</span><span class="p">[]</span> <span class="o">=</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;notepad.exe&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="n">DeElevateStartProcess</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[获取进程打开的互斥量]]></title>
    <link href="http://towriting.com/blog/2013/07/25/mutexs-owned-by-process/"/>
    <updated>2013-07-25T21:36:00+08:00</updated>
    <id>http://towriting.com/blog/2013/07/25/mutexs-owned-by-process</id>
    <content type="html"><![CDATA[<p>最近有个任务涉及到区分【同进程名进程】，所以想到了用进程"拥有"的互斥量来区分这些进程。所以下面实现了获取指定进程"拥有"哪些互斥量的方法，当然这种方法也适合各种内核对象（FILE、REG&hellip;)。</p>

<pre><code>1. 使用NtQuerySystemInformation检索SystemHandleInformation(16)即可获得系统中所有的句柄信息：
</code></pre>

<p>通过SystemHandleInformation检索到的系统中所有句柄的数据结构是这样定义的：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SYSTEM_HANDLE_INFORMATION</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ULONG</span> <span class="n">HandleCount</span><span class="p">;</span>
</span><span class='line'><span class="n">SYSTEM_HANDLE_TABLE_ENTRY_INFO</span> <span class="n">Handles</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="n">SYSTEM_HANDLE_INFORMATION</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_HANDLE_INFORMATION</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中SYSTEM_HANDLE_TABLE_ENTRY_INFO是一个句柄信息的数据结构
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SYSTEM_HANDLE_TABLE_ENTRY_INFO</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ULONG</span> <span class="n">ProcessId</span><span class="p">;</span>
</span><span class='line'><span class="n">BYTE</span> <span class="n">ObjectTypeNumber</span><span class="p">;</span>
</span><span class='line'><span class="n">BYTE</span> <span class="n">Flags</span><span class="p">;</span>
</span><span class='line'><span class="n">USHORT</span> <span class="n">Handle</span><span class="p">;</span>
</span><span class='line'><span class="n">PVOID</span> <span class="n">Object</span><span class="p">;</span>
</span><span class='line'><span class="n">ACCESS_MASK</span> <span class="n">GrantedAccess</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="n">SYSTEM_HANDLE_TABLE_ENTRY_INFO</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_HANDLE_TABLE_ENTRY_INFO</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<pre><code>2. 将句柄复制到当前进程
</code></pre>

<p>想要获取一个句柄的详细信息，必须将其拷贝到当前进程，对于一个句柄数据类型：SYSTEM_HANDLE_TABLE_ENTRY_INFO，我们可以使用其第四个成员Handle，然后使用DuplicateHandle将这个句柄复制到当前进程。</p>

<pre><code>3. 获取句柄的类型信息
</code></pre>

<p>由2中获取的复制到当前进程的句柄，调用函数NtQueryObject，指定获取ObjectNameInformation(1)即可获取句柄的类型信息，获取到的句柄的类型信息结构是这样的：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_OBJECT_TYPE_INFORMATION</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UNICODE_STRING</span> <span class="n">TypeName</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">TotalNumberOfObjects</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">TotalNumberOfHandles</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">TotalPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">TotalNonPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">TotalNamePoolUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">TotalHandleTableUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">HighWaterNumberOfObjects</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">HighWaterNumberOfHandles</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">HighWaterPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">HighWaterNonPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">HighWaterNamePoolUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">HighWaterHandleTableUsage</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">InvalidAttributes</span><span class="p">;</span>
</span><span class='line'><span class="n">GENERIC_MAPPING</span> <span class="n">GenericMapping</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">ValidAccessMask</span><span class="p">;</span>
</span><span class='line'><span class="n">BOOLEAN</span> <span class="n">SecurityRequired</span><span class="p">;</span>
</span><span class='line'><span class="n">BOOLEAN</span> <span class="n">MaintainHandleCount</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">PoolType</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">DefaultPagedPoolCharge</span><span class="p">;</span>
</span><span class='line'><span class="n">ULONG</span> <span class="n">DefaultNonPagedPoolCharge</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="n">OBJECT_TYPE_INFORMATION</span><span class="p">,</span> <span class="o">*</span><span class="n">POBJECT_TYPE_INFORMATION</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
其中第一个成员TypeName即是句柄类型的类型名</p>

<!--more-->


<pre><code>4. 获取句柄的名字
</code></pre>

<p>调用函数NtQueryObject，指定获取ObjectNameInformation即可获取句柄的类型信息，获取到的句柄的名字数据结构是UNICODE_STRING类型。</p>

<pre><code>5. 找到当前进程占有的互斥量
</code></pre>

<p>由获取的句柄的类型信息和句柄所在的进程ID，即可找到当前进程拥有的互斥量，同时我们也得到了互斥量的名字。</p>

<h3>完整代码如下：</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>代码：WIN7/VS2010 (get_process_mutex.cpp)</span> <a href='/downloads/code/cpp/get_process_mutex.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;stdafx.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;functional&gt;</span>
</span><span class='line'><span class="cp">#include &lt;Windows.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;winternl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ntstatus.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NtQueryObject枚举出的内核对象的类型信息的结构</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_OBJECT_TYPE_INFORMATION</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">UNICODE_STRING</span> <span class="n">TypeName</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">TotalNumberOfObjects</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">TotalNumberOfHandles</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">TotalPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">TotalNonPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">TotalNamePoolUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">TotalHandleTableUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">HighWaterNumberOfObjects</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">HighWaterNumberOfHandles</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">HighWaterPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">HighWaterNonPagedPoolUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">HighWaterNamePoolUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">HighWaterHandleTableUsage</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">InvalidAttributes</span><span class="p">;</span>
</span><span class='line'>	<span class="n">GENERIC_MAPPING</span> <span class="n">GenericMapping</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">ValidAccessMask</span><span class="p">;</span>
</span><span class='line'>	<span class="n">BOOLEAN</span> <span class="n">SecurityRequired</span><span class="p">;</span>
</span><span class='line'>	<span class="n">BOOLEAN</span> <span class="n">MaintainHandleCount</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">PoolType</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">DefaultPagedPoolCharge</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">DefaultNonPagedPoolCharge</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">OBJECT_TYPE_INFORMATION</span><span class="p">,</span> <span class="o">*</span><span class="n">POBJECT_TYPE_INFORMATION</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 一个句柄信息的数据结构</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SYSTEM_HANDLE_TABLE_ENTRY_INFO</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">ULONG</span> <span class="n">ProcessId</span><span class="p">;</span>
</span><span class='line'>	<span class="n">BYTE</span> <span class="n">ObjectTypeNumber</span><span class="p">;</span>
</span><span class='line'>	<span class="n">BYTE</span> <span class="n">Flags</span><span class="p">;</span>
</span><span class='line'>	<span class="n">USHORT</span> <span class="n">Handle</span><span class="p">;</span>
</span><span class='line'>	<span class="n">PVOID</span> <span class="n">Object</span><span class="p">;</span>
</span><span class='line'>	<span class="n">ACCESS_MASK</span> <span class="n">GrantedAccess</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">SYSTEM_HANDLE_TABLE_ENTRY_INFO</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_HANDLE_TABLE_ENTRY_INFO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取一个句柄的详细信息</span>
</span><span class='line'><span class="c1">// 可以获取类型名和内核对象的名字</span>
</span><span class='line'><span class="c1">// bType - 获取句柄的类型名</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">QueryHandleNameInfo</span><span class="p">(</span><span class="n">HANDLE</span> <span class="n">handle</span><span class="p">,</span> <span class="n">BOOL</span> <span class="n">bType</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">strName</span><span class="p">;</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">HMODULE</span> <span class="n">hDll</span> <span class="o">=</span> <span class="n">LoadLibrary</span><span class="p">(</span><span class="n">_T</span><span class="p">(</span><span class="s">&quot;ntdll.dll&quot;</span><span class="p">));</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">hDll</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">strName</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">typedef</span> <span class="n">NTSTATUS</span> <span class="p">(</span><span class="n">NTAPI</span> <span class="o">*</span><span class="n">NtQueryObjectFunc</span><span class="p">)(</span><span class="n">HANDLE</span><span class="p">,</span> <span class="n">OBJECT_INFORMATION_CLASS</span><span class="p">,</span> <span class="n">PVOID</span><span class="p">,</span> <span class="n">ULONG</span><span class="p">,</span> <span class="n">PULONG</span><span class="p">);</span>
</span><span class='line'>	<span class="n">NtQueryObjectFunc</span> <span class="n">NtQueryObject_</span> <span class="o">=</span> <span class="p">(</span><span class="n">NtQueryObjectFunc</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hDll</span><span class="p">,</span> <span class="s">&quot;NtQueryObject&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">do</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">NtQueryObject_</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="c1">// 获取信息</span>
</span><span class='line'>		<span class="k">const</span> <span class="n">DWORD</span> <span class="n">ObjectNameInformation</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>		<span class="n">OBJECT_INFORMATION_CLASS</span> <span class="n">infoType</span> <span class="o">=</span> <span class="n">bType</span> <span class="o">?</span> <span class="n">ObjectTypeInformation</span> <span class="o">:</span> <span class="n">OBJECT_INFORMATION_CLASS</span><span class="p">(</span><span class="n">ObjectNameInformation</span><span class="p">);</span>
</span><span class='line'>		<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">BYTE</span><span class="o">&gt;</span> <span class="n">objVec</span><span class="p">(</span><span class="mi">256</span><span class="p">);</span>
</span><span class='line'>		<span class="n">ULONG</span> <span class="n">bytesOfRead</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>	
</span><span class='line'>		<span class="n">NTSTATUS</span> <span class="n">status</span> <span class="o">=</span> <span class="n">STATUS_UNSUCCESSFUL</span><span class="p">;</span>
</span><span class='line'>		<span class="k">do</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="n">status</span> <span class="o">=</span> <span class="n">NtQueryObject_</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">infoType</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">objVec</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">objVec</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">bytesOfRead</span><span class="p">);</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">STATUS_INFO_LENGTH_MISMATCH</span> <span class="o">==</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="n">objVec</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">objVec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>				<span class="k">continue</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">NT_SUCCESS</span><span class="p">(</span><span class="n">status</span><span class="p">))</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="n">objVec</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">bytesOfRead</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">bType</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">const</span> <span class="n">OBJECT_TYPE_INFORMATION</span> <span class="o">*</span><span class="n">pObjType</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">OBJECT_TYPE_INFORMATION</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">objVec</span><span class="p">.</span><span class="n">data</span><span class="p">());</span>
</span><span class='line'>			<span class="n">strName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="p">(</span><span class="n">pObjType</span><span class="o">-&gt;</span><span class="n">TypeName</span><span class="p">.</span><span class="n">Buffer</span><span class="p">,</span> <span class="n">pObjType</span><span class="o">-&gt;</span><span class="n">TypeName</span><span class="p">.</span><span class="n">Length</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WCHAR</span><span class="p">));</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="k">else</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">const</span> <span class="n">UNICODE_STRING</span> <span class="o">*</span><span class="n">pObjName</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">UNICODE_STRING</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">objVec</span><span class="p">.</span><span class="n">data</span><span class="p">());</span>
</span><span class='line'>			<span class="n">strName</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="p">(</span><span class="n">pObjName</span><span class="o">-&gt;</span><span class="n">Buffer</span><span class="p">,</span> <span class="n">pObjName</span><span class="o">-&gt;</span><span class="n">Length</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WCHAR</span><span class="p">));</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">FreeLibrary</span><span class="p">(</span><span class="n">hDll</span><span class="p">);</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">strName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 遍历句柄辅助类</span>
</span><span class='line'><span class="k">class</span> <span class="nc">WalkHandleHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="n">WalkHandleHelper</span><span class="p">(</span><span class="k">const</span> <span class="n">SYSTEM_HANDLE_TABLE_ENTRY_INFO</span><span class="o">&amp;</span> <span class="n">handleInfo</span><span class="p">,</span> <span class="k">const</span> <span class="n">HANDLE</span><span class="o">&amp;</span> <span class="n">handle</span><span class="p">)</span><span class="o">:</span><span class="n">m_HandleInfo</span><span class="p">(</span><span class="n">handleInfo</span><span class="p">),</span> <span class="n">m_Handle</span><span class="p">(</span><span class="n">handle</span><span class="p">){}</span>
</span><span class='line'>	<span class="n">DWORD</span> <span class="n">GetProcessID</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">m_HandleInfo</span><span class="p">.</span><span class="n">ProcessId</span><span class="p">;}</span>
</span><span class='line'>	<span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">GetTypeName</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">QueryHandleNameInfo</span><span class="p">(</span><span class="n">m_Handle</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">GetObjectName</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="n">QueryHandleNameInfo</span><span class="p">(</span><span class="n">m_Handle</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">SYSTEM_HANDLE_TABLE_ENTRY_INFO</span><span class="o">&amp;</span> <span class="n">m_HandleInfo</span><span class="p">;</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">HANDLE</span><span class="o">&amp;</span> <span class="n">m_Handle</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 枚举系统的句柄</span>
</span><span class='line'><span class="kt">void</span> <span class="n">WalkHandle</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="k">const</span> <span class="n">WalkHandleHelper</span><span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">functor</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">HMODULE</span> <span class="n">hDll</span> <span class="o">=</span> <span class="n">LoadLibrary</span><span class="p">(</span><span class="n">_T</span><span class="p">(</span><span class="s">&quot;ntdll.dll&quot;</span><span class="p">));</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">hDll</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// 使用NtQuerySystemInformation检索SystemHandleInformation(16)即可获得系统中所有的句柄信息</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">DWORD</span> <span class="n">SystemHandleInformation</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>		
</span><span class='line'>
</span><span class='line'>	<span class="c1">// 通过SystemHandleInformation检索到的系统中所有句柄的数据结构</span>
</span><span class='line'>	<span class="k">typedef</span> <span class="k">struct</span> <span class="n">_SYSTEM_HANDLE_INFORMATION</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="n">ULONG</span> <span class="n">HandleCount</span><span class="p">;</span>
</span><span class='line'>		<span class="n">SYSTEM_HANDLE_TABLE_ENTRY_INFO</span> <span class="n">Handles</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>	<span class="p">}</span> <span class="n">SYSTEM_HANDLE_INFORMATION</span><span class="p">,</span> <span class="o">*</span><span class="n">PSYSTEM_HANDLE_INFORMATION</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>	<span class="k">typedef</span> <span class="n">NTSTATUS</span> <span class="p">(</span><span class="n">NTAPI</span> <span class="o">*</span><span class="n">NtQuerySystemInformationFunc</span><span class="p">)(</span><span class="n">ULONG</span><span class="p">,</span> <span class="n">PVOID</span><span class="p">,</span> <span class="n">ULONG</span><span class="p">,</span> <span class="n">PULONG</span><span class="p">);</span>
</span><span class='line'>	<span class="n">NtQuerySystemInformationFunc</span> <span class="n">NtQuerySystemInformation_</span> <span class="o">=</span> <span class="p">(</span><span class="n">NtQuerySystemInformationFunc</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hDll</span><span class="p">,</span> <span class="s">&quot;NtQuerySystemInformation&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">HANDLE</span> <span class="n">hCurProcess</span> <span class="o">=</span> <span class="n">GetCurrentProcess</span><span class="p">();</span>
</span><span class='line'>	<span class="k">do</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">NtQuerySystemInformation_</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="c1">// 获取系统句柄表</span>
</span><span class='line'>		<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">BYTE</span><span class="o">&gt;</span> <span class="n">vecData</span><span class="p">(</span><span class="mi">512</span><span class="p">);</span>
</span><span class='line'>		<span class="n">ULONG</span> <span class="n">bytesOfRead</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>		<span class="n">NTSTATUS</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>		<span class="k">do</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="n">status</span> <span class="o">=</span> <span class="n">NtQuerySystemInformation_</span><span class="p">(</span><span class="n">SystemHandleInformation</span><span class="p">,</span> <span class="n">vecData</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">vecData</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">bytesOfRead</span><span class="p">);</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="n">STATUS_INFO_LENGTH_MISMATCH</span> <span class="o">==</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="n">vecData</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">vecData</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>				<span class="k">continue</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">NT_SUCCESS</span><span class="p">(</span><span class="n">status</span><span class="p">))</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>		<span class="n">vecData</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">bytesOfRead</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">PSYSTEM_HANDLE_INFORMATION</span> <span class="n">pSysHandleInfo</span> <span class="o">=</span> <span class="p">(</span><span class="n">PSYSTEM_HANDLE_INFORMATION</span><span class="p">)</span><span class="n">vecData</span><span class="p">.</span><span class="n">data</span><span class="p">();</span>
</span><span class='line'>		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pSysHandleInfo</span><span class="o">-&gt;</span><span class="n">HandleCount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>
</span><span class='line'>			<span class="k">const</span> <span class="n">HANDLE</span> <span class="n">hOwnProcess</span> <span class="o">=</span> <span class="n">OpenProcess</span><span class="p">(</span><span class="n">PROCESS_DUP_HANDLE</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">pSysHandleInfo</span><span class="o">-&gt;</span><span class="n">Handles</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ProcessId</span><span class="p">);</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">hOwnProcess</span><span class="p">)</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="k">continue</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="n">HANDLE</span> <span class="n">hDuplicate</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>			<span class="c1">// 必须把Handle放入自己的进程中，否则无法获取其他进程拥有Handle的信息</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">DuplicateHandle</span><span class="p">(</span><span class="n">hOwnProcess</span><span class="p">,</span> <span class="p">(</span><span class="n">HANDLE</span><span class="p">)</span><span class="n">pSysHandleInfo</span><span class="o">-&gt;</span><span class="n">Handles</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Handle</span><span class="p">,</span> <span class="n">hCurProcess</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hDuplicate</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">DUPLICATE_SAME_ACCESS</span><span class="p">))</span>
</span><span class='line'>			<span class="p">{</span>
</span><span class='line'>				<span class="n">CloseHandle</span><span class="p">(</span><span class="n">hOwnProcess</span><span class="p">);</span>
</span><span class='line'>				<span class="k">continue</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="n">WalkHandleHelper</span> <span class="n">helper</span><span class="p">(</span><span class="n">pSysHandleInfo</span><span class="o">-&gt;</span><span class="n">Handles</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">hDuplicate</span><span class="p">);</span>
</span><span class='line'>			<span class="n">functor</span><span class="p">(</span><span class="n">helper</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="n">CloseHandle</span><span class="p">(</span><span class="n">hDuplicate</span><span class="p">);</span>
</span><span class='line'>			<span class="n">CloseHandle</span><span class="p">(</span><span class="n">hOwnProcess</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">FreeLibrary</span><span class="p">(</span><span class="n">hDll</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 枚举当前进程的互斥量</span>
</span><span class='line'><span class="kt">void</span> <span class="n">EnumCurProcessMutex</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">std</span><span class="o">::</span><span class="n">wcout</span><span class="o">&lt;&lt;</span><span class="n">_T</span><span class="p">(</span><span class="s">&quot;Find The Mutex Opened By Current Process:&quot;</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="k">const</span> <span class="n">DWORD</span> <span class="n">dwCurProcess</span> <span class="o">=</span> <span class="n">GetCurrentProcessId</span><span class="p">();</span>
</span><span class='line'>	<span class="n">WalkHandle</span><span class="p">([</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">WalkHandleHelper</span><span class="o">&amp;</span> <span class="n">helper</span><span class="p">)</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">strMutant</span><span class="p">(</span><span class="n">_T</span><span class="p">(</span><span class="s">&quot;Mutant&quot;</span><span class="p">));</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">helper</span><span class="p">.</span><span class="n">GetProcessID</span><span class="p">()</span> <span class="o">==</span> <span class="n">dwCurProcess</span> <span class="o">&amp;&amp;</span> <span class="n">helper</span><span class="p">.</span><span class="n">GetTypeName</span><span class="p">().</span><span class="n">compare</span><span class="p">(</span><span class="n">strMutant</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>		<span class="p">{</span>			
</span><span class='line'>			<span class="n">std</span><span class="o">::</span><span class="n">wcout</span><span class="o">&lt;&lt;</span><span class="n">_T</span><span class="p">(</span><span class="s">&quot;ObjectName: &quot;</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">helper</span><span class="p">.</span><span class="n">GetObjectName</span><span class="p">().</span><span class="n">c_str</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">CreateMutex</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>	<span class="n">CreateMutex</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;TestMutex&quot;</span><span class="p">));</span>
</span><span class='line'>	<span class="n">CreateMutex</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="s">&quot;Global</span><span class="se">\\</span><span class="s">TestGlobalMutex&quot;</span><span class="p">));</span>
</span><span class='line'>	<span class="n">EnumCurProcessMutex</span><span class="p">();</span>
</span><span class='line'>	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart GetProcAddress之实现]]></title>
    <link href="http://towriting.com/blog/2013/07/20/smart-getprocaddress/"/>
    <updated>2013-07-20T22:36:00+08:00</updated>
    <id>http://towriting.com/blog/2013/07/20/smart-getprocaddress</id>
    <content type="html"><![CDATA[<p>Windows下有过编程经验的朋友肯定用过这个函数：<a href="http://msdn.microsoft.com/en-us/library/ms683212%28v=vs.85%29.aspx">GetProcAddress</a>，作用呢，就是从加载的动态库中获取指定函数名的函数入口地址，函数使用方法简单，一般是如下流程：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DLL导出函数的头文件:dll.h</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func1</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func2</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>动态加载DLL调用上面两个函数</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">FUNC1</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="n">WINAPI</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">FUNC2</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">FUNC1</span> <span class="n">func1</span> <span class="o">=</span> <span class="p">(</span><span class="n">FUNC1</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">T</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="n">FUNC2</span> <span class="n">func2</span> <span class="o">=</span> <span class="p">(</span><span class="n">FUNC2</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">T</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="n">func1</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">func2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以上是主流的代码写法，但其实稍有问题：
1. 要定义一套函数类型，且违反DRY，枯燥乏味，影响代码美观
2. 隐式类型转换是魔鬼，如果DLL实现变化，则调用出错，比如：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DLL导出函数的头文件：fun2的参数变成了三个，调用非出错不可</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func1</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">WINAPI</span> <span class="n">func2</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>好，问题来了，如何避免：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>方案1：使用模板</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 封装一个智能GetProcAddress</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">SmartGetProcAddress</span><span class="p">(</span><span class="n">HModule</span> <span class="n">hModule</span><span class="p">,</span> <span class="n">TChar</span><span class="o">*</span> <span class="n">pFuncName</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hModule</span><span class="p">,</span> <span class="n">pFuncName</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 使用方法如下：注意1. 要引用对应头文件，2. auto（自动类型推导）关键字从VS2010开始支持</span>
</span><span class='line'><span class="k">auto</span> <span class="n">func1</span> <span class="o">=</span> <span class="n">SmartGetProcAddress</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;),</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">func1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
看起来我们解决了DRY问题，也不用写繁琐的typedef了，于是我们开始Build，很快你就发现Link错误，unresolved external symbol，没注意取地址&amp;func1，已静态依赖于DLL，看来此路不通。取地址的目的是从头文件中获取函数的类型，还有什么方法可以获取函数的类型呢？
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>方案2：使用decltype</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 封装一个智能GetProcAddress</span>
</span><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">T</span> <span class="n">SmartGetProcAddress</span><span class="p">(</span><span class="n">HModule</span> <span class="n">hModule</span><span class="p">,</span> <span class="n">TChar</span><span class="o">*</span> <span class="n">pFuncName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="n">GetProcAddress</span><span class="p">(</span><span class="n">hModule</span><span class="p">,</span> <span class="n">pFuncName</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 使用方法如下：</span>
</span><span class='line'><span class="k">auto</span> <span class="n">func1</span> <span class="o">=</span> <span class="n">SmartGetProcAddress</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">decltype</span><span class="p">(</span><span class="n">func1</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">hDLL</span><span class="p">,</span> <span class="n">_T</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">func1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用decltype可以解决，函数取地址（&amp;)会静态依赖DLL问题，这里的关键是decltype(func1)这种写法的支持，最初这种写法在g++4.7测试是支持的，不过后来再VS2012、VS2010上测试好像都不支持，所以SmartGetProcAddress只能存在于理论阶段了。</p>
]]></content>
  </entry>
  
</feed>
