<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 总结 | 书写|记下人生痕迹]]></title>
  <link href="http://towriting.com/blog/categories/zong-jie/atom.xml" rel="self"/>
  <link href="http://towriting.com/"/>
  <updated>2019-03-16T20:39:40+08:00</updated>
  <id>http://towriting.com/</id>
  <author>
    <name><![CDATA[ToWriting]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dock项目个人总结]]></title>
    <link href="http://towriting.com/blog/2014/05/03/dock-project-experience/"/>
    <updated>2014-05-03T22:55:00+08:00</updated>
    <id>http://towriting.com/blog/2014/05/03/dock-project-experience</id>
    <content type="html"><![CDATA[<p>Dock说白了是电脑桌面上常驻的一个工作区，Dock的目的是占领用户的桌面，况且我们追赶的团队和追赶我们的团队都已做出Dock，所以应用宝必须也要做。关于应用宝Dock的具体进度、功能与界面不做介绍，现在从开发的角度讲一讲Dock项目两个月来的一点体会。</p>

<p>自己的角色：负责逻辑部分接口和整体框架的设计，及相关功能开发。</p>

<h3>可圈可点之处：</h3>

<hr />

<p><strong>1. 逻辑与界面完全分离</strong></p>

<p>Dock项目应该是，我们团队第一次在多人协作下，采用了界面与逻辑分离的开发方案。这样的好处是：降低了耦合，使开发简单化（做UI的无需关心逻辑，反之依然）。当然这样做必然会增加一些工作量，尤其是后来界面和逻辑分属不同进程，逻辑的接口必须做IPC转发。</p>

<p>逻辑与界面分离的方案，最重要的是定义好接口。</p>

<p><strong>2. 最小完备接口</strong></p>

<p>最小完备接口是我一贯主张的一种接口风格，因为一旦增加冗余的接口，并被客户端代码使用，那就很难移除了，势必造成接口膨胀。项目期间，主管提出接口要提前考虑、功能要丰富的建议，不过自己还是坚持了自己想法。因为加一个接口容易，去掉一个就难了，好比韩愈曾说的，从善如登、从恶如崩。</p>

<h3>败笔之处</h3>

<hr />

<p><strong>1. 任务分配粗略</strong></p>

<p>需求接下来，四个人开始做，一开始定下两个人做界面另两个做逻辑，但没有细化具体的产品细节、开发难度耗时等，也没有分配具体谁做什么事情，只是口头上大概分了一下。这极易导致任务分配不均和任务遗漏的现象。好的方法应该是，细化任务并明确责任，公诸于众。但团队积习如此，非朝夕可改。</p>

<p><strong>2. 线程的滥用</strong></p>

<p>线程滥用当然指逻辑部分。从进入应用宝团队初期，就发现代码中线程滥用，好似每天不开几个线程吃不下饭一般。所以最初Dock的逻辑代码的主框架考虑到了这点，以使后面添加具体业务时无需创建线程。但后期，需求的演变和功能的要求迫使不得不又增加了几个线程，其实有些线程是非必须的。而这些不必要的线程，往往会滋生一批Bug。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年（下半年）个人总结]]></title>
    <link href="http://towriting.com/blog/2014/01/01/2013-review/"/>
    <updated>2014-01-01T21:55:00+08:00</updated>
    <id>http://towriting.com/blog/2014/01/01/2013-review</id>
    <content type="html"><![CDATA[<blockquote><p>人没有进步，和死鱼有什么区别！</p></blockquote>

<p>今天是西元2014年的第一天，最近一周内，网上随意浏览时各种关于个人或者行业的年度总结不时映入眼帘。当然行业大佬、业界明星的总结与底层的程序员是不可能相同的，无论从视角、信息含量、高度等维度来比较。前者会高屋建瓴的描绘行业发展态势、自己（公司）为何做出某个举动、某个举动的结果、未来行业的走向等等；而后者更多的关注于：今年学习了哪些技术、换了几份工作、攒了多少钱等等。所以程序员的个人总结，仅仅是个人总结。</p>

<h2>总结的目的：Summary Or Review</h2>

<p>就在准备写这个总结时，本想给新的Markdown文件来个规范的命名，最初我以为是<code>Summary</code>但以Summary + 2013为关键字Google并不能得到看起来像“年度总结”的东西，去HackerNews瞎翻一通，终于看到了一个哥们的2013年度总结:<a href="http://nathanbarry.com/2013-review/">TWO YEARS AFTER QUITTING MY JOB: 2013 IN REVIEW</a>，<code>Review</code>做总结的翻译再合适不过了。在我看来Review有两层意思，其一是字面意思：<strong>回看</strong>，单从这一层意思看，Summary亦可胜任。另一层，IT行业的同学自可意会，通不过<code>Review</code>的代码需要<strong>回退</strong>(当然人生无法回退）。所以<strong>总结的意义在于：发现问题</strong>。</p>

<h2>下半年做了什么</h2>

<p>上半年的流水帐已交待在<a href="/blog/2013/09/15/summary/">上半年总结</a>中。下半年工作基本上算是上一阶段的自然延续，代码得到了组长的认可，开始参与手机管家开发。11月开始了应用宝Mini版开发，应用宝Mini版是今年压力最大的开发任务：工期短、框架不熟悉、任务重。回过头来看，大家竟然按时完成了。应用宝完整版的开发自己并没有参与，而被安排做另一个新项目的开发，开发的产品会成为后续应用宝版本的“核心”。前期主要由我一个人开发，由组长Review接口，到目前系统的框架和基本功能已完成，此项目不爽的是用VS2005开发，对于熟悉C++11的人来说，VS2010与VS2005的差别自是判若云泥。</p>

<p>其它的就算是翻译了技术文章数篇吧。</p>

<h2>下半年学了些什么</h2>

<p>技术方面下半年，很惭愧的讲并没有自己满意的进步或新的输入。新的技术输入可能算是Ruby语言的学习，不过第一轮学习计划：阅读Ruby编程语言和Ruby元编程，才完成40%。再就是工作中接触到了COM，知道了一些COM相关的开发流程。C++方面的深入貌似裹足不前了，这半年来没有在某个大面比如并发或模板上专门提高，只是随意的在某些细枝末节上深入而已。工具上可能算是对一些软件更熟练使用了，比如这篇<a href="/blog/2013/11/17/effective-tools/">记录</a>的，虽提高了工作效率，但都不太值得一提。</p>

<h2>Review出的问题</h2>

<p>1 自己是工作的机器吗</p>

<p>13年工作较以往强度增大了很多，加班也已经达到了一般人难以想象的程度，有的月仅休息3天，平时一般都是22：00后下班。在这样的工作状态和个人习惯的双重影响下，13年自己除了工作貌似并没有做任何有意义的事情，还好有2次旅游，一次越南、一次江西。
朋友交流团队活动也很少，所以13年自己好像成了工作的机器。</p>

<p>2 阅读亮起了黄灯</p>

<p>自己一直自认为算是个“好读书”的人，但从自己的<a href="/blog/2013/07/20/the-books-i-have-read/">读书记录</a>来看，13年的阅读量下降了不少，平均才每月一本，而且很多还拖沓着没有读完，说工作太忙只是给自己找借口，其实周六周日还是有时间的，而周六日的时间好像都耗费在无意义的上网和看视频上。时间是个很奇怪的东西，当半夜下班拖着疲倦的身体，倒想到了时间的宝贵，会很珍惜的带着困意阅读一会儿。而周六日大把的时间，觉得肯定不缺阅读的时间，直至周日晚上才发现还没有翻过书。
新的一年一定纠正周末懒散的坏习惯。</p>

<p>3 社交能力的丧失</p>

<p>13年，大部分时间实在公司，休息时也窝在住处。除工作外没有认识任何人，没有参加过任何体育运动，孑然一身，逐渐丧失交际能力。2014要走出去！！！</p>

<h2>2014要做什么</h2>

<h4>Must do</h4>

<ul>
<li>改正上面的问题：1、2</li>
<li>3月前学习Ruby,前半年开发一款WebAPP</li>
</ul>


<h4>Can do</h4>

<ul>
<li>改正上面的问题：3</li>
<li>考个驾照</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[癸巳年上半年总结]]></title>
    <link href="http://towriting.com/blog/2013/09/15/summary/"/>
    <updated>2013-09-15T22:35:00+08:00</updated>
    <id>http://towriting.com/blog/2013/09/15/summary</id>
    <content type="html"><![CDATA[<blockquote><p>How Time Flies!</p></blockquote>

<p>标题中年份用的是农历，春节后回杭州，元宵后办理完交接离开同花顺，到二月廿八入职TX，从那时算起到今天亦有半年多了。</p>

<h3>关于健康</h3>

<p>先从李开复罹癌说起（希望他可以康复），不管名气再大，总归是人，自然规律，生老病死无法逃避。不过李的生病，又掀起了一股，IT从业者是癌症高发人群的讨论，一些网站还列出了预防癌症的n条方法。李的生病对我的触动也很大，因为媒体上曝光李的压力很大，经常凌晨2、3点睡觉，而我最近睡的也比较晚差多不也1点半左右。无法好好休息，确实是对健康的透支，李是台湾省人，又有在国外生活经历，经济条件又好，想必规律性的深度体检是有的，所以可以及早发现。而我们大多数人，可能小病就是扛着，每年一次的体检也是马马虎虎，也没有什么健康意识。从今往后睡眠一定要保证，自己力争12点半之前入睡。说句题外话，如今中国近万人确诊癌症，而李不过是其中之一，如果李不是名人，又有谁重视，印象中李的出名是因其反复跳槽被媒体炒作，估计也是他为后来搞风投作势，话说微软与李同一级别的华人并不少，乃至现在有个叫做陆奇的华人，现在被国外媒体认定为鲍尔默接班人之一，级别在李之上多矣，为何李如此出名？</p>

<h3>工作的事</h3>

<p>这一段时间确实工作时间很长，8月份休息了三天，9月份的周六目前也都在加班。至于加班的原因，我个人概括的如下：</p>

<ol>
<li>产品设计需求不明确，不细化，变更频仍</li>
<li>上一条导致，我们无法预估时间，但产品发布的时间是死的，往往也不够</li>
<li>开发时间少，且团队代码不够规范，所以代码质量低下，bug很多</li>
</ol>


<p>话说入职TX后，最不适应的就是，产品设计不够详细，纰漏多，文档少，变化快。团队也发现了这个问题，也在慢慢改，不过自己也接受并努力去习惯这种节奏。有时，一个很大的需求只有短短几句话，确实会让人升起一股卷铺盖走人的冲动，但现实是残酷的，无法逃避的，就像《麦田的守望者》的主人公一样，逃避不了的，自己也要力争达到《麦》中那句名言：一个成熟男人的标志是他愿意为一项事业卑微地活着。所以如果是产品设计问题，要沟通，引导他们完成设计。</p>

<p>目前团队的项目是，Android手机PC端（windows）的管理软件。自己刚进入时，主要做一些辅助项目的开发，比如守护进程和第三方合作插件。自己在开发这些软件的时候，感觉在Windows系统编程方面经验太少，多亏我的导师给我指出了一些方向、技术点和强大的stackoverflow.com，才是我顺利完成了工作，这部分不熟悉的内容主要包括：win7下进程Token、各种内核对象、管道的使用等等。</p>

<p>目前团队使用的开发环境主要是VS2010，这还算对我胃口的，因为支持C++11，要说这半年自己技术上的进步，只能说是C++11常用用法的熟练使用，因为lambda的方便性，感觉STL中的算法焕发了第二春，现在我已经很少用for循环了
可惜vs2010不支持ranged for loop。</p>

<h3>融入团队</h3>

<p>融入团队，目的是为了更好的合作，终极目的是为了创造更好的产品。</p>

<p>要融入的内容包括：</p>

<ol>
<li>和大部分人建立融洽的关系</li>
<li>熟悉团队的开发流程、规范、潜规则</li>
<li>影响团队，改造团队的坏习惯，促进团队良性发展</li>
</ol>


<p>以上三点，是难度递增的。第一是“和大部分人建立融洽的关系”。人分三种：第一种人是，热心的帮助你，主动跟你建立融洽关系；第二种人是, 你需要感化，帮助他，影响他从而建立融洽关系； 第三人是：价值观、习惯与自己差异较大，且对人有成见，此种很难建立融洽关系的。</p>

<p>一般前两种占据90%以上，第三种很少，很圆滑会来事的人可以去攻克第三种，像我这种木讷的人，就懒得管第三种了，平时保持距离，但切记不要影响工作，切记融入团队的终极目标是创造好的产品。</p>

<p>第一点，自己目前完成度一般，有客观的原因，比如很长一段时间都是做独立项目，且团队活动很少。主观上，做程序员久了，感觉交际能力下降，在同花顺时，总能结合场景说一些灵机一闪的幽默言语，所以同事间相当融洽。目前工作之间的交流还算融洽，但相信这一点随着时间的推移会越来越好的。</p>

<p>第二点是，熟悉团队的开发流程，规范，潜规则。目前的开发流程可以归结为：快速迭代，持续优化。所以编码时的质量是不高的，比如前几天与一同事一块儿开发一个需求，看他写的类中有大量的public函数，但这些函数外面并不会调用，还有一些很该写成const的函数没写，提醒他，他答曰：迭代太快，一开始考虑不全。其实这些是团队的开发习惯，编码规范问题，大家都这样，所以一直糊里糊涂的写着。代码是用TFS管理的，会建立一些分支，这些都熟悉了。代码上的潜规则也会有一些，都是出了问题后，才发现并修补掉的，比如看起来八杆子打不着的函数有依赖关系等等，这个只能遇到一个记录一个。</p>

<p>第三点是，影响团队，去陋改良。这一点，自己是很热心的，比如，会和大家分享一些C++的编码规范技巧等等，推广一下Python，推进一些高级工具的使用等等。效果有一些，但一个团队的习惯，是一个复杂的历史问题，有其合理的地方，平时只会在小的地方改良，或者经历惨痛的教训后，才会主动改革。</p>

<h3>梦想实现财务自由</h3>

<p>前一段时间，确实很累，让我梦想有一天可以实现财务自由，可以做一个自由职业者。于是做了一个尝试，做了两个Niche站，一个中文一个英文，目前还没有收入，现在的心态是，不求收益，但至少我体验了一把建站的思路。建这种站，是一个持久的活动，但假使这两个站有收益，也是杯水车薪，但不排除有经验后，自己可以做出相对成功的niche站。</p>

<p>niche站看来短期内，不是实现自己财务自由的途径。</p>

<p>自己两年来定投了两支基金，其中一直亏损严重，但上周业绩比较漂亮，每天能给我带来3、5百的收益，假如一直这样多好。现实是残酷的，现实是没有假如的。定投基金的心态一定要是：不贪不惧，争取跑过余额宝就可以了。</p>

<p>实现财务自由之路还需继续探索了，有理想是不可耻的，但切记不可在公司上班期间，利用工作资源时间践行自己的理想，自己与公司是有契约的，要有契约精神。</p>

<h3>技术路上的进退</h3>

<p>技术路上的进步，说起来还是C++了，进步的程度，只能说是更娴熟了（C++谁人敢说精通呢？）。具体而言，主要是C++11的熟练使用，STL的熟练使用。据我观察与阅读其他人代码，可以基本推断自己C++水平是相对较好的。比如C++11语法只有1个人在用，在数十万的代码中搜索不到几个STL中的常用算法函数（for_each、remove_if等），代码中也有很多明显的违反《effictive C++》的内容。但圈子小，并不是每个人都C++感兴趣，国外一些C++牛人的博客上介绍的主题，自己闻所未闻，C++14/C++1y, C++还有很多可以探索的领域。但不知自己在C++上的投入是不是不归路，今年换工作的面试中，就遇到好多人的诘问：C++有什么好学的？C++学那么好有什么用？</p>

<p>但除了C++，自己又找不到特别感兴趣的方向。今天看《高效能程序员的修炼》，里面提到不要为了学习而学习，不要学习以后可能会用到的东西，要学自己感兴趣的东西。这些观点，放到我身上就是矛盾的，我感兴趣的是C++，但有些东西以后并不一定能够用得到。</p>

<p>其他技术上的进步，主要是一些零碎的技术知识。最近一年，在也没学过大块新的知识了。近来也断续听到这种说法，读书成瘾，为学而学。感觉自己以前有这种倾向，感觉自己像知识的冰箱，存储了好多原料，却不会用这些做出一桌丰盛的菜来。</p>
]]></content>
  </entry>
  
</feed>
